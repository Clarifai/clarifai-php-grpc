<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api\ModelTypeField;

use UnexpectedValueException;

/**
 * DataType is used in MethodSignature to define all the possible types that a python function
 * may have that we want to support. These include built-ins like int, float, str, bool, and
 * more complex types like JSON, numpy arrays, List, Tuple, Dict (as Named Fields), as well as Clarifai provided
 * unstructured types like Image, Video, Text, etc.
 *
 * Protobuf type <code>clarifai.api.ModelTypeField.DataType</code>
 */
class DataType
{
    /**
     * Generated from protobuf enum <code>NOT_SET = 0;</code>
     */
    const NOT_SET = 0;
    /**
     * A string value.
     *
     * Generated from protobuf enum <code>STR = 1;</code>
     */
    const STR = 1;
    /**
     * A byte string. This is used for binary data.
     *
     * Generated from protobuf enum <code>BYTES = 2;</code>
     */
    const BYTES = 2;
    /**
     * An integer value.
     *
     * Generated from protobuf enum <code>INT = 3;</code>
     */
    const INT = 3;
    /**
     * A float value.
     *
     * Generated from protobuf enum <code>FLOAT = 4;</code>
     */
    const FLOAT = 4;
    /**
     * A boolean value.
     *
     * Generated from protobuf enum <code>BOOL = 5;</code>
     */
    const BOOL = 5;
    /**
     * A proto representation for numpy arrays.
     *
     * Generated from protobuf enum <code>NDARRAY = 6;</code>
     */
    const NDARRAY = 6;
    /**
     * For arbitrary json object: "{...}"
     *
     * Generated from protobuf enum <code>JSON_DATA = 7;</code>
     */
    const JSON_DATA = 7;
    /**
     * For text data
     *
     * Generated from protobuf enum <code>TEXT = 8;</code>
     */
    const TEXT = 8;
    /**
     * A image is a image proto for url or bytes.
     *
     * Generated from protobuf enum <code>IMAGE = 9;</code>
     */
    const IMAGE = 9;
    /**
     * A concept is a concept proto that represents a concept in the app.
     *
     * Generated from protobuf enum <code>CONCEPT = 10;</code>
     */
    const CONCEPT = 10;
    /**
     * A region is a bounding box in an image or video frame.
     *
     * Generated from protobuf enum <code>REGION = 11;</code>
     */
    const REGION = 11;
    /**
     * A frame is a single image in a video stream
     *
     * Generated from protobuf enum <code>FRAME = 12;</code>
     */
    const FRAME = 12;
    /**
     * A audio is a audio proto for url or bytes.
     *
     * Generated from protobuf enum <code>AUDIO = 13;</code>
     */
    const AUDIO = 13;
    /**
     * A video is a video proto for url or bytes.
     *
     * Generated from protobuf enum <code>VIDEO = 14;</code>
     */
    const VIDEO = 14;
    /**
     * this can be used to store named fields with values similar to Dict
     *
     * Generated from protobuf enum <code>NAMED_FIELDS = 15;</code>
     */
    const NAMED_FIELDS = 15;
    /**
     * An arg that is a tuple.
     *
     * Generated from protobuf enum <code>TUPLE = 16;</code>
     */
    const TUPLE = 16;
    /**
     * An arg that is a list.
     *
     * Generated from protobuf enum <code>LIST = 17;</code>
     */
    const PBLIST = 17;

    private static $valueToName = [
        self::NOT_SET => 'NOT_SET',
        self::STR => 'STR',
        self::BYTES => 'BYTES',
        self::INT => 'INT',
        self::FLOAT => 'FLOAT',
        self::BOOL => 'BOOL',
        self::NDARRAY => 'NDARRAY',
        self::JSON_DATA => 'JSON_DATA',
        self::TEXT => 'TEXT',
        self::IMAGE => 'IMAGE',
        self::CONCEPT => 'CONCEPT',
        self::REGION => 'REGION',
        self::FRAME => 'FRAME',
        self::AUDIO => 'AUDIO',
        self::VIDEO => 'VIDEO',
        self::NAMED_FIELDS => 'NAMED_FIELDS',
        self::TUPLE => 'TUPLE',
        self::PBLIST => 'LIST',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DataType::class, \Clarifai\Api\ModelTypeField_DataType::class);

