<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * PasswordPolicy
 *
 * Generated from protobuf message <code>clarifai.api.PasswordPolicy</code>
 */
class PasswordPolicy extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * either of the two below needs to be filled in
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     */
    protected $user_id = '';
    /**
     * Generated from protobuf field <code>string organization_id = 3;</code>
     */
    protected $organization_id = '';
    /**
     * Generated from protobuf field <code>uint32 minimum_length = 4;</code>
     */
    protected $minimum_length = 0;
    /**
     * Generated from protobuf field <code>uint32 maximum_length = 5;</code>
     */
    protected $maximum_length = 0;
    /**
     * if at least one upper-case character should appear in the password
     *
     * Generated from protobuf field <code>bool upper_case_needed = 6;</code>
     */
    protected $upper_case_needed = false;
    /**
     * if at least one lower-case character should appear in the password
     *
     * Generated from protobuf field <code>bool lower_case_needed = 7;</code>
     */
    protected $lower_case_needed = false;
    /**
     * if at least a number should appear in the password
     *
     * Generated from protobuf field <code>bool numeric_needed = 8;</code>
     */
    protected $numeric_needed = false;
    /**
     * if at least a special character should appear in the password
     *
     * Generated from protobuf field <code>bool non_alphanumeric_needed = 9;</code>
     */
    protected $non_alphanumeric_needed = false;
    /**
     * the duration for which the password will last before it needs to be reset with a new one
     * We use 'day' as the unit of time here
     *
     * Generated from protobuf field <code>uint32 password_life_span_days = 10;</code>
     */
    protected $password_life_span_days = 0;
    /**
     * when resetting a passwod, we check if the new password has been used before.
     * this epoch is the number of generations of latest password we cannot use again.
     *
     * Generated from protobuf field <code>uint32 password_reuse_epoch = 11;</code>
     */
    protected $password_reuse_epoch = 0;
    /**
     * if the password should not contain user's first or last names
     *
     * Generated from protobuf field <code>bool exclude_names = 12;</code>
     */
    protected $exclude_names = false;
    /**
     * if the password should not contain the first part of the user's primary email
     *
     * Generated from protobuf field <code>bool exclude_email = 13;</code>
     */
    protected $exclude_email = false;
    /**
     * if the password should not contain confusing letters such as 0(numeric zero) and o(first character of omega)
     *
     * Generated from protobuf field <code>bool no_confusing_letters = 14;</code>
     */
    protected $no_confusing_letters = false;
    /**
     * if the password should not be as simple as series of numbers (123456...) or same characters (aaaaaa or 222222 etc)
     *
     * Generated from protobuf field <code>bool no_simple_passwords = 15;</code>
     */
    protected $no_simple_passwords = false;
    /**
     * if the password should not contain simple vocabularies like password
     *
     * Generated from protobuf field <code>bool no_common_vocabs = 16;</code>
     */
    protected $no_common_vocabs = false;
    /**
     * if either the old password should not contain the new password or the new password should not contain the old password
     *
     * Generated from protobuf field <code>bool no_overlap_with_old = 17;</code>
     */
    protected $no_overlap_with_old = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *     @type string $user_id
     *           either of the two below needs to be filled in
     *     @type string $organization_id
     *     @type int $minimum_length
     *     @type int $maximum_length
     *     @type bool $upper_case_needed
     *           if at least one upper-case character should appear in the password
     *     @type bool $lower_case_needed
     *           if at least one lower-case character should appear in the password
     *     @type bool $numeric_needed
     *           if at least a number should appear in the password
     *     @type bool $non_alphanumeric_needed
     *           if at least a special character should appear in the password
     *     @type int $password_life_span_days
     *           the duration for which the password will last before it needs to be reset with a new one
     *           We use 'day' as the unit of time here
     *     @type int $password_reuse_epoch
     *           when resetting a passwod, we check if the new password has been used before.
     *           this epoch is the number of generations of latest password we cannot use again.
     *     @type bool $exclude_names
     *           if the password should not contain user's first or last names
     *     @type bool $exclude_email
     *           if the password should not contain the first part of the user's primary email
     *     @type bool $no_confusing_letters
     *           if the password should not contain confusing letters such as 0(numeric zero) and o(first character of omega)
     *     @type bool $no_simple_passwords
     *           if the password should not be as simple as series of numbers (123456...) or same characters (aaaaaa or 222222 etc)
     *     @type bool $no_common_vocabs
     *           if the password should not contain simple vocabularies like password
     *     @type bool $no_overlap_with_old
     *           if either the old password should not contain the new password or the new password should not contain the old password
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * either of the two below needs to be filled in
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     * @return string
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * either of the two below needs to be filled in
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setUserId($var)
    {
        GPBUtil::checkString($var, True);
        $this->user_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string organization_id = 3;</code>
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->organization_id;
    }

    /**
     * Generated from protobuf field <code>string organization_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setOrganizationId($var)
    {
        GPBUtil::checkString($var, True);
        $this->organization_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 minimum_length = 4;</code>
     * @return int
     */
    public function getMinimumLength()
    {
        return $this->minimum_length;
    }

    /**
     * Generated from protobuf field <code>uint32 minimum_length = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setMinimumLength($var)
    {
        GPBUtil::checkUint32($var);
        $this->minimum_length = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 maximum_length = 5;</code>
     * @return int
     */
    public function getMaximumLength()
    {
        return $this->maximum_length;
    }

    /**
     * Generated from protobuf field <code>uint32 maximum_length = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setMaximumLength($var)
    {
        GPBUtil::checkUint32($var);
        $this->maximum_length = $var;

        return $this;
    }

    /**
     * if at least one upper-case character should appear in the password
     *
     * Generated from protobuf field <code>bool upper_case_needed = 6;</code>
     * @return bool
     */
    public function getUpperCaseNeeded()
    {
        return $this->upper_case_needed;
    }

    /**
     * if at least one upper-case character should appear in the password
     *
     * Generated from protobuf field <code>bool upper_case_needed = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setUpperCaseNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->upper_case_needed = $var;

        return $this;
    }

    /**
     * if at least one lower-case character should appear in the password
     *
     * Generated from protobuf field <code>bool lower_case_needed = 7;</code>
     * @return bool
     */
    public function getLowerCaseNeeded()
    {
        return $this->lower_case_needed;
    }

    /**
     * if at least one lower-case character should appear in the password
     *
     * Generated from protobuf field <code>bool lower_case_needed = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setLowerCaseNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->lower_case_needed = $var;

        return $this;
    }

    /**
     * if at least a number should appear in the password
     *
     * Generated from protobuf field <code>bool numeric_needed = 8;</code>
     * @return bool
     */
    public function getNumericNeeded()
    {
        return $this->numeric_needed;
    }

    /**
     * if at least a number should appear in the password
     *
     * Generated from protobuf field <code>bool numeric_needed = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setNumericNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->numeric_needed = $var;

        return $this;
    }

    /**
     * if at least a special character should appear in the password
     *
     * Generated from protobuf field <code>bool non_alphanumeric_needed = 9;</code>
     * @return bool
     */
    public function getNonAlphanumericNeeded()
    {
        return $this->non_alphanumeric_needed;
    }

    /**
     * if at least a special character should appear in the password
     *
     * Generated from protobuf field <code>bool non_alphanumeric_needed = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setNonAlphanumericNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->non_alphanumeric_needed = $var;

        return $this;
    }

    /**
     * the duration for which the password will last before it needs to be reset with a new one
     * We use 'day' as the unit of time here
     *
     * Generated from protobuf field <code>uint32 password_life_span_days = 10;</code>
     * @return int
     */
    public function getPasswordLifeSpanDays()
    {
        return $this->password_life_span_days;
    }

    /**
     * the duration for which the password will last before it needs to be reset with a new one
     * We use 'day' as the unit of time here
     *
     * Generated from protobuf field <code>uint32 password_life_span_days = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setPasswordLifeSpanDays($var)
    {
        GPBUtil::checkUint32($var);
        $this->password_life_span_days = $var;

        return $this;
    }

    /**
     * when resetting a passwod, we check if the new password has been used before.
     * this epoch is the number of generations of latest password we cannot use again.
     *
     * Generated from protobuf field <code>uint32 password_reuse_epoch = 11;</code>
     * @return int
     */
    public function getPasswordReuseEpoch()
    {
        return $this->password_reuse_epoch;
    }

    /**
     * when resetting a passwod, we check if the new password has been used before.
     * this epoch is the number of generations of latest password we cannot use again.
     *
     * Generated from protobuf field <code>uint32 password_reuse_epoch = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setPasswordReuseEpoch($var)
    {
        GPBUtil::checkUint32($var);
        $this->password_reuse_epoch = $var;

        return $this;
    }

    /**
     * if the password should not contain user's first or last names
     *
     * Generated from protobuf field <code>bool exclude_names = 12;</code>
     * @return bool
     */
    public function getExcludeNames()
    {
        return $this->exclude_names;
    }

    /**
     * if the password should not contain user's first or last names
     *
     * Generated from protobuf field <code>bool exclude_names = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setExcludeNames($var)
    {
        GPBUtil::checkBool($var);
        $this->exclude_names = $var;

        return $this;
    }

    /**
     * if the password should not contain the first part of the user's primary email
     *
     * Generated from protobuf field <code>bool exclude_email = 13;</code>
     * @return bool
     */
    public function getExcludeEmail()
    {
        return $this->exclude_email;
    }

    /**
     * if the password should not contain the first part of the user's primary email
     *
     * Generated from protobuf field <code>bool exclude_email = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setExcludeEmail($var)
    {
        GPBUtil::checkBool($var);
        $this->exclude_email = $var;

        return $this;
    }

    /**
     * if the password should not contain confusing letters such as 0(numeric zero) and o(first character of omega)
     *
     * Generated from protobuf field <code>bool no_confusing_letters = 14;</code>
     * @return bool
     */
    public function getNoConfusingLetters()
    {
        return $this->no_confusing_letters;
    }

    /**
     * if the password should not contain confusing letters such as 0(numeric zero) and o(first character of omega)
     *
     * Generated from protobuf field <code>bool no_confusing_letters = 14;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoConfusingLetters($var)
    {
        GPBUtil::checkBool($var);
        $this->no_confusing_letters = $var;

        return $this;
    }

    /**
     * if the password should not be as simple as series of numbers (123456...) or same characters (aaaaaa or 222222 etc)
     *
     * Generated from protobuf field <code>bool no_simple_passwords = 15;</code>
     * @return bool
     */
    public function getNoSimplePasswords()
    {
        return $this->no_simple_passwords;
    }

    /**
     * if the password should not be as simple as series of numbers (123456...) or same characters (aaaaaa or 222222 etc)
     *
     * Generated from protobuf field <code>bool no_simple_passwords = 15;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoSimplePasswords($var)
    {
        GPBUtil::checkBool($var);
        $this->no_simple_passwords = $var;

        return $this;
    }

    /**
     * if the password should not contain simple vocabularies like password
     *
     * Generated from protobuf field <code>bool no_common_vocabs = 16;</code>
     * @return bool
     */
    public function getNoCommonVocabs()
    {
        return $this->no_common_vocabs;
    }

    /**
     * if the password should not contain simple vocabularies like password
     *
     * Generated from protobuf field <code>bool no_common_vocabs = 16;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoCommonVocabs($var)
    {
        GPBUtil::checkBool($var);
        $this->no_common_vocabs = $var;

        return $this;
    }

    /**
     * if either the old password should not contain the new password or the new password should not contain the old password
     *
     * Generated from protobuf field <code>bool no_overlap_with_old = 17;</code>
     * @return bool
     */
    public function getNoOverlapWithOld()
    {
        return $this->no_overlap_with_old;
    }

    /**
     * if either the old password should not contain the new password or the new password should not contain the old password
     *
     * Generated from protobuf field <code>bool no_overlap_with_old = 17;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoOverlapWithOld($var)
    {
        GPBUtil::checkBool($var);
        $this->no_overlap_with_old = $var;

        return $this;
    }

}

