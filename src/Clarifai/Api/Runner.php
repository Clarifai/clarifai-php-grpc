<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A worker for compute within a nodepool of instances.
 * This asks the API for work
 *
 * Generated from protobuf message <code>clarifai.api.Runner</code>
 */
class Runner extends \Google\Protobuf\Internal\Message
{
    /**
     * A unique ID for this runner.
     * This is a UUID since runners can be automatically orchestrated.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * short description about the runner.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     */
    protected $description = '';
    /**
     * When the runner was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 3;</code>
     */
    protected $created_at = null;
    /**
     * When the runner was last modified.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 4;</code>
     */
    protected $modified_at = null;
    /**
     * To handle arbitrary json metadata you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     * This is an optional arg.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 5;</code>
     */
    protected $metadata = null;
    /**
     * Labels to match in order to find work.
     *
     * Generated from protobuf field <code>repeated string labels = 7 [deprecated = true];</code>
     * @deprecated
     */
    private $labels;
    /**
     * Instead of just matching on labels we might want to have more explicit matching of what
     * work this runner is looking for.
     * The thing that the autoscaling config applies to for this nodepool.
     *
     * Generated from protobuf field <code>.clarifai.api.Worker worker = 8;</code>
     */
    protected $worker = null;
    /**
     * Runners are defined within nodepools so this field needs the id and user_id of the nodepool
     * to be provided when creating a Runner.
     * This nodepool must be accessible to you or an org you are part of.
     *
     * Generated from protobuf field <code>.clarifai.api.Nodepool nodepool = 9;</code>
     */
    protected $nodepool = null;
    /**
     *&#47;/////////////////////////
     * Need resources on the runner so we can schedule this Runner into the Nodepool.
     * If this runner is being orchestrated for a model then the orchestrator will set this to the
     * model resource requirements. If a workflow then it'll compute those requirements and set
     * populate this resource field.
     * Having this on the underlying object like Model and Workflow allows us to represent the minimum
     * requirements on those object, which may be less than what the Runner allocates (as a safety
     * margin for the runner to for sure run the resource).
     *
     * Generated from protobuf field <code>.clarifai.api.ComputeInfo compute_info = 10;</code>
     */
    protected $compute_info = null;
    /**
     * Number of replicas that this runner should have up.
     * We keep it separate from ComputeInfo which defines how many resources each replica needs.
     *
     * Generated from protobuf field <code>uint32 num_replicas = 11;</code>
     */
    protected $num_replicas = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           A unique ID for this runner.
     *           This is a UUID since runners can be automatically orchestrated.
     *     @type string $description
     *           short description about the runner.
     *     @type \Google\Protobuf\Timestamp $created_at
     *           When the runner was created.
     *     @type \Google\Protobuf\Timestamp $modified_at
     *           When the runner was last modified.
     *     @type \Google\Protobuf\Struct $metadata
     *           To handle arbitrary json metadata you can use a struct field:
     *           https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *           This is an optional arg.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $labels
     *           Labels to match in order to find work.
     *     @type \Clarifai\Api\Worker $worker
     *           Instead of just matching on labels we might want to have more explicit matching of what
     *           work this runner is looking for.
     *           The thing that the autoscaling config applies to for this nodepool.
     *     @type \Clarifai\Api\Nodepool $nodepool
     *           Runners are defined within nodepools so this field needs the id and user_id of the nodepool
     *           to be provided when creating a Runner.
     *           This nodepool must be accessible to you or an org you are part of.
     *     @type \Clarifai\Api\ComputeInfo $compute_info
     *          &#47;/////////////////////////
     *           Need resources on the runner so we can schedule this Runner into the Nodepool.
     *           If this runner is being orchestrated for a model then the orchestrator will set this to the
     *           model resource requirements. If a workflow then it'll compute those requirements and set
     *           populate this resource field.
     *           Having this on the underlying object like Model and Workflow allows us to represent the minimum
     *           requirements on those object, which may be less than what the Runner allocates (as a safety
     *           margin for the runner to for sure run the resource).
     *     @type int $num_replicas
     *           Number of replicas that this runner should have up.
     *           We keep it separate from ComputeInfo which defines how many resources each replica needs.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * A unique ID for this runner.
     * This is a UUID since runners can be automatically orchestrated.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * A unique ID for this runner.
     * This is a UUID since runners can be automatically orchestrated.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * short description about the runner.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * short description about the runner.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * When the runner was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 3;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    public function hasCreatedAt()
    {
        return isset($this->created_at);
    }

    public function clearCreatedAt()
    {
        unset($this->created_at);
    }

    /**
     * When the runner was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 3;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreatedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created_at = $var;

        return $this;
    }

    /**
     * When the runner was last modified.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 4;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getModifiedAt()
    {
        return $this->modified_at;
    }

    public function hasModifiedAt()
    {
        return isset($this->modified_at);
    }

    public function clearModifiedAt()
    {
        unset($this->modified_at);
    }

    /**
     * When the runner was last modified.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 4;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setModifiedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->modified_at = $var;

        return $this;
    }

    /**
     * To handle arbitrary json metadata you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     * This is an optional arg.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 5;</code>
     * @return \Google\Protobuf\Struct|null
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    public function hasMetadata()
    {
        return isset($this->metadata);
    }

    public function clearMetadata()
    {
        unset($this->metadata);
    }

    /**
     * To handle arbitrary json metadata you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     * This is an optional arg.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 5;</code>
     * @param \Google\Protobuf\Struct $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Struct::class);
        $this->metadata = $var;

        return $this;
    }

    /**
     * Labels to match in order to find work.
     *
     * Generated from protobuf field <code>repeated string labels = 7 [deprecated = true];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     * @deprecated
     */
    public function getLabels()
    {
        @trigger_error('labels is deprecated.', E_USER_DEPRECATED);
        return $this->labels;
    }

    /**
     * Labels to match in order to find work.
     *
     * Generated from protobuf field <code>repeated string labels = 7 [deprecated = true];</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     * @deprecated
     */
    public function setLabels($var)
    {
        @trigger_error('labels is deprecated.', E_USER_DEPRECATED);
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->labels = $arr;

        return $this;
    }

    /**
     * Instead of just matching on labels we might want to have more explicit matching of what
     * work this runner is looking for.
     * The thing that the autoscaling config applies to for this nodepool.
     *
     * Generated from protobuf field <code>.clarifai.api.Worker worker = 8;</code>
     * @return \Clarifai\Api\Worker|null
     */
    public function getWorker()
    {
        return $this->worker;
    }

    public function hasWorker()
    {
        return isset($this->worker);
    }

    public function clearWorker()
    {
        unset($this->worker);
    }

    /**
     * Instead of just matching on labels we might want to have more explicit matching of what
     * work this runner is looking for.
     * The thing that the autoscaling config applies to for this nodepool.
     *
     * Generated from protobuf field <code>.clarifai.api.Worker worker = 8;</code>
     * @param \Clarifai\Api\Worker $var
     * @return $this
     */
    public function setWorker($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Worker::class);
        $this->worker = $var;

        return $this;
    }

    /**
     * Runners are defined within nodepools so this field needs the id and user_id of the nodepool
     * to be provided when creating a Runner.
     * This nodepool must be accessible to you or an org you are part of.
     *
     * Generated from protobuf field <code>.clarifai.api.Nodepool nodepool = 9;</code>
     * @return \Clarifai\Api\Nodepool|null
     */
    public function getNodepool()
    {
        return $this->nodepool;
    }

    public function hasNodepool()
    {
        return isset($this->nodepool);
    }

    public function clearNodepool()
    {
        unset($this->nodepool);
    }

    /**
     * Runners are defined within nodepools so this field needs the id and user_id of the nodepool
     * to be provided when creating a Runner.
     * This nodepool must be accessible to you or an org you are part of.
     *
     * Generated from protobuf field <code>.clarifai.api.Nodepool nodepool = 9;</code>
     * @param \Clarifai\Api\Nodepool $var
     * @return $this
     */
    public function setNodepool($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Nodepool::class);
        $this->nodepool = $var;

        return $this;
    }

    /**
     *&#47;/////////////////////////
     * Need resources on the runner so we can schedule this Runner into the Nodepool.
     * If this runner is being orchestrated for a model then the orchestrator will set this to the
     * model resource requirements. If a workflow then it'll compute those requirements and set
     * populate this resource field.
     * Having this on the underlying object like Model and Workflow allows us to represent the minimum
     * requirements on those object, which may be less than what the Runner allocates (as a safety
     * margin for the runner to for sure run the resource).
     *
     * Generated from protobuf field <code>.clarifai.api.ComputeInfo compute_info = 10;</code>
     * @return \Clarifai\Api\ComputeInfo|null
     */
    public function getComputeInfo()
    {
        return $this->compute_info;
    }

    public function hasComputeInfo()
    {
        return isset($this->compute_info);
    }

    public function clearComputeInfo()
    {
        unset($this->compute_info);
    }

    /**
     *&#47;/////////////////////////
     * Need resources on the runner so we can schedule this Runner into the Nodepool.
     * If this runner is being orchestrated for a model then the orchestrator will set this to the
     * model resource requirements. If a workflow then it'll compute those requirements and set
     * populate this resource field.
     * Having this on the underlying object like Model and Workflow allows us to represent the minimum
     * requirements on those object, which may be less than what the Runner allocates (as a safety
     * margin for the runner to for sure run the resource).
     *
     * Generated from protobuf field <code>.clarifai.api.ComputeInfo compute_info = 10;</code>
     * @param \Clarifai\Api\ComputeInfo $var
     * @return $this
     */
    public function setComputeInfo($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\ComputeInfo::class);
        $this->compute_info = $var;

        return $this;
    }

    /**
     * Number of replicas that this runner should have up.
     * We keep it separate from ComputeInfo which defines how many resources each replica needs.
     *
     * Generated from protobuf field <code>uint32 num_replicas = 11;</code>
     * @return int
     */
    public function getNumReplicas()
    {
        return $this->num_replicas;
    }

    /**
     * Number of replicas that this runner should have up.
     * We keep it separate from ComputeInfo which defines how many resources each replica needs.
     *
     * Generated from protobuf field <code>uint32 num_replicas = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setNumReplicas($var)
    {
        GPBUtil::checkUint32($var);
        $this->num_replicas = $var;

        return $this;
    }

}

