<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ConceptQuery
 *
 * Generated from protobuf message <code>clarifai.api.ConceptQuery</code>
 */
class ConceptQuery extends \Google\Protobuf\Internal\Message
{
    /**
     * The name of the concept to search.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * The language of the concept name in a search. Defaults to English.
     *
     * Generated from protobuf field <code>string language = 2;</code>
     */
    protected $language = '';
    /**
     * Deprecated: Use workflow.id instead.
     *
     * Generated from protobuf field <code>string workflow_id = 3 [deprecated = true];</code>
     * @deprecated
     */
    protected $workflow_id = '';
    /**
     * The concepts must belong to models with specified use cases.
     * Multiple values are joined using an OR condition.
     *
     * Generated from protobuf field <code>repeated .clarifai.api.WorkflowModelUseCase use_cases = 4;</code>
     */
    private $use_cases;
    /**
     * By default, we return app concepts combined with source (model or workflow) concepts.
     * If source is not set, then we only return app concepts.
     * If ignore_app_concepts is true, then we only return source concepts.
     * When use_cases are set, then ignore_app_concepts is always true, because
     * concept use cases can only be determined in relation to a model or a workflow.
     *
     * Generated from protobuf field <code>bool ignore_app_concepts = 7;</code>
     */
    protected $ignore_app_concepts = false;
    protected $source;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           The name of the concept to search.
     *     @type string $language
     *           The language of the concept name in a search. Defaults to English.
     *     @type string $workflow_id
     *           Deprecated: Use workflow.id instead.
     *     @type array<int>|\Google\Protobuf\Internal\RepeatedField $use_cases
     *           The concepts must belong to models with specified use cases.
     *           Multiple values are joined using an OR condition.
     *     @type \Clarifai\Api\Model $model
     *     @type \Clarifai\Api\Workflow $workflow
     *     @type bool $ignore_app_concepts
     *           By default, we return app concepts combined with source (model or workflow) concepts.
     *           If source is not set, then we only return app concepts.
     *           If ignore_app_concepts is true, then we only return source concepts.
     *           When use_cases are set, then ignore_app_concepts is always true, because
     *           concept use cases can only be determined in relation to a model or a workflow.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * The name of the concept to search.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The name of the concept to search.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * The language of the concept name in a search. Defaults to English.
     *
     * Generated from protobuf field <code>string language = 2;</code>
     * @return string
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * The language of the concept name in a search. Defaults to English.
     *
     * Generated from protobuf field <code>string language = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setLanguage($var)
    {
        GPBUtil::checkString($var, True);
        $this->language = $var;

        return $this;
    }

    /**
     * Deprecated: Use workflow.id instead.
     *
     * Generated from protobuf field <code>string workflow_id = 3 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getWorkflowId()
    {
        @trigger_error('workflow_id is deprecated.', E_USER_DEPRECATED);
        return $this->workflow_id;
    }

    /**
     * Deprecated: Use workflow.id instead.
     *
     * Generated from protobuf field <code>string workflow_id = 3 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setWorkflowId($var)
    {
        @trigger_error('workflow_id is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->workflow_id = $var;

        return $this;
    }

    /**
     * The concepts must belong to models with specified use cases.
     * Multiple values are joined using an OR condition.
     *
     * Generated from protobuf field <code>repeated .clarifai.api.WorkflowModelUseCase use_cases = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getUseCases()
    {
        return $this->use_cases;
    }

    /**
     * The concepts must belong to models with specified use cases.
     * Multiple values are joined using an OR condition.
     *
     * Generated from protobuf field <code>repeated .clarifai.api.WorkflowModelUseCase use_cases = 4;</code>
     * @param array<int>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setUseCases($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::ENUM, \Clarifai\Api\WorkflowModelUseCase::class);
        $this->use_cases = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Model model = 5;</code>
     * @return \Clarifai\Api\Model|null
     */
    public function getModel()
    {
        return $this->readOneof(5);
    }

    public function hasModel()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Model model = 5;</code>
     * @param \Clarifai\Api\Model $var
     * @return $this
     */
    public function setModel($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Model::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Workflow workflow = 6;</code>
     * @return \Clarifai\Api\Workflow|null
     */
    public function getWorkflow()
    {
        return $this->readOneof(6);
    }

    public function hasWorkflow()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Workflow workflow = 6;</code>
     * @param \Clarifai\Api\Workflow $var
     * @return $this
     */
    public function setWorkflow($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Workflow::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * By default, we return app concepts combined with source (model or workflow) concepts.
     * If source is not set, then we only return app concepts.
     * If ignore_app_concepts is true, then we only return source concepts.
     * When use_cases are set, then ignore_app_concepts is always true, because
     * concept use cases can only be determined in relation to a model or a workflow.
     *
     * Generated from protobuf field <code>bool ignore_app_concepts = 7;</code>
     * @return bool
     */
    public function getIgnoreAppConcepts()
    {
        return $this->ignore_app_concepts;
    }

    /**
     * By default, we return app concepts combined with source (model or workflow) concepts.
     * If source is not set, then we only return app concepts.
     * If ignore_app_concepts is true, then we only return source concepts.
     * When use_cases are set, then ignore_app_concepts is always true, because
     * concept use cases can only be determined in relation to a model or a workflow.
     *
     * Generated from protobuf field <code>bool ignore_app_concepts = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreAppConcepts($var)
    {
        GPBUtil::checkBool($var);
        $this->ignore_app_concepts = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getSource()
    {
        return $this->whichOneof("source");
    }

}

