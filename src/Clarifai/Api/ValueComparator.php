<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use UnexpectedValueException;

/**
 * For the concept-threshold model type we use these comparison.
 * This is in the "concept_threshold_type" field of "infer_params" in the output config of
 * the model.
 * The json value can either be the integer field number:
 *   {"infer_params": {"concept_threshold_type": 3}}
 * Or the string field name:
 *   {"infer_params": {"concept_threshold_type": "LESS_THAN"}}
 *
 * Protobuf type <code>clarifai.api.ValueComparator</code>
 */
class ValueComparator
{
    /**
     * Generated from protobuf enum <code>CONCEPT_THRESHOLD_NOT_SET = 0;</code>
     */
    const CONCEPT_THRESHOLD_NOT_SET = 0;
    /**
     * input > value
     *
     * Generated from protobuf enum <code>GREATER_THAN = 1;</code>
     */
    const GREATER_THAN = 1;
    /**
     * input >= value
     *
     * Generated from protobuf enum <code>GREATER_THAN_OR_EQUAL = 2;</code>
     */
    const GREATER_THAN_OR_EQUAL = 2;
    /**
     * input < value
     *
     * Generated from protobuf enum <code>LESS_THAN = 3;</code>
     */
    const LESS_THAN = 3;
    /**
     * input <= value
     *
     * Generated from protobuf enum <code>LESS_THAN_OR_EQUAL = 4;</code>
     */
    const LESS_THAN_OR_EQUAL = 4;
    /**
     * input == value
     *
     * Generated from protobuf enum <code>EQUAL = 5;</code>
     */
    const EQUAL = 5;

    private static $valueToName = [
        self::CONCEPT_THRESHOLD_NOT_SET => 'CONCEPT_THRESHOLD_NOT_SET',
        self::GREATER_THAN => 'GREATER_THAN',
        self::GREATER_THAN_OR_EQUAL => 'GREATER_THAN_OR_EQUAL',
        self::LESS_THAN => 'LESS_THAN',
        self::LESS_THAN_OR_EQUAL => 'LESS_THAN_OR_EQUAL',
        self::EQUAL => 'EQUAL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

