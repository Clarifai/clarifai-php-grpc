<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * PasswordViolations
 *
 * Generated from protobuf message <code>clarifai.api.PasswordViolations</code>
 */
class PasswordViolations extends \Google\Protobuf\Internal\Message
{
    /**
     * when new password length is shorter than minimum length set
     *
     * Generated from protobuf field <code>bool minimum_length = 1;</code>
     */
    protected $minimum_length = false;
    /**
     * when new password length is longer than maximum length set
     *
     * Generated from protobuf field <code>bool maximum_length = 2;</code>
     */
    protected $maximum_length = false;
    /**
     * there is no upper case letter in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool upper_case_needed = 3;</code>
     */
    protected $upper_case_needed = false;
    /**
     * there is no lower case letter in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool lower_case_needed = 4;</code>
     */
    protected $lower_case_needed = false;
    /**
     * there is no numerics in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool numeric_needed = 5;</code>
     */
    protected $numeric_needed = false;
    /**
     * there is no special character in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool non_alphanumeric_needed = 6;</code>
     */
    protected $non_alphanumeric_needed = false;
    /**
     * when one of the N most recent old password is reused, N is specified by password_reuse_epoch in db.password_policies
     *
     * Generated from protobuf field <code>bool password_reuse = 7;</code>
     */
    protected $password_reuse = false;
    /**
     * when either user's first, middle or last name is used in the new password
     *
     * Generated from protobuf field <code>bool exclude_names = 8;</code>
     */
    protected $exclude_names = false;
    /**
     * when first part of user's email (exact string or after removing special characters) is used in the new password
     *
     * Generated from protobuf field <code>bool exclude_email = 9;</code>
     */
    protected $exclude_email = false;
    /**
     * when there are confusing letters in the new password, such as o (first character of 'omega') vs 0 (zero)
     *
     * Generated from protobuf field <code>bool no_confusing_letters = 10;</code>
     */
    protected $no_confusing_letters = false;
    /**
     * when there are simple password patterns used, such as 12345678 or aaaaaaa1
     *
     * Generated from protobuf field <code>bool no_simple_passwords = 11;</code>
     */
    protected $no_simple_passwords = false;
    /**
     * when there are common vocabs from the common vocab list used
     *
     * Generated from protobuf field <code>bool no_common_vocabs = 12;</code>
     */
    protected $no_common_vocabs = false;
    /**
     * when the current password is contained in the new password or vice versa
     *
     * Generated from protobuf field <code>bool no_overlap_with_old = 13;</code>
     */
    protected $no_overlap_with_old = false;
    /**
     * when password has to be changed becauase it's too old
     *
     * Generated from protobuf field <code>bool password_lifespan = 14;</code>
     */
    protected $password_lifespan = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $minimum_length
     *           when new password length is shorter than minimum length set
     *     @type bool $maximum_length
     *           when new password length is longer than maximum length set
     *     @type bool $upper_case_needed
     *           there is no upper case letter in the new password when there should be at least one
     *     @type bool $lower_case_needed
     *           there is no lower case letter in the new password when there should be at least one
     *     @type bool $numeric_needed
     *           there is no numerics in the new password when there should be at least one
     *     @type bool $non_alphanumeric_needed
     *           there is no special character in the new password when there should be at least one
     *     @type bool $password_reuse
     *           when one of the N most recent old password is reused, N is specified by password_reuse_epoch in db.password_policies
     *     @type bool $exclude_names
     *           when either user's first, middle or last name is used in the new password
     *     @type bool $exclude_email
     *           when first part of user's email (exact string or after removing special characters) is used in the new password
     *     @type bool $no_confusing_letters
     *           when there are confusing letters in the new password, such as o (first character of 'omega') vs 0 (zero)
     *     @type bool $no_simple_passwords
     *           when there are simple password patterns used, such as 12345678 or aaaaaaa1
     *     @type bool $no_common_vocabs
     *           when there are common vocabs from the common vocab list used
     *     @type bool $no_overlap_with_old
     *           when the current password is contained in the new password or vice versa
     *     @type bool $password_lifespan
     *           when password has to be changed becauase it's too old
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * when new password length is shorter than minimum length set
     *
     * Generated from protobuf field <code>bool minimum_length = 1;</code>
     * @return bool
     */
    public function getMinimumLength()
    {
        return $this->minimum_length;
    }

    /**
     * when new password length is shorter than minimum length set
     *
     * Generated from protobuf field <code>bool minimum_length = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setMinimumLength($var)
    {
        GPBUtil::checkBool($var);
        $this->minimum_length = $var;

        return $this;
    }

    /**
     * when new password length is longer than maximum length set
     *
     * Generated from protobuf field <code>bool maximum_length = 2;</code>
     * @return bool
     */
    public function getMaximumLength()
    {
        return $this->maximum_length;
    }

    /**
     * when new password length is longer than maximum length set
     *
     * Generated from protobuf field <code>bool maximum_length = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setMaximumLength($var)
    {
        GPBUtil::checkBool($var);
        $this->maximum_length = $var;

        return $this;
    }

    /**
     * there is no upper case letter in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool upper_case_needed = 3;</code>
     * @return bool
     */
    public function getUpperCaseNeeded()
    {
        return $this->upper_case_needed;
    }

    /**
     * there is no upper case letter in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool upper_case_needed = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setUpperCaseNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->upper_case_needed = $var;

        return $this;
    }

    /**
     * there is no lower case letter in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool lower_case_needed = 4;</code>
     * @return bool
     */
    public function getLowerCaseNeeded()
    {
        return $this->lower_case_needed;
    }

    /**
     * there is no lower case letter in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool lower_case_needed = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setLowerCaseNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->lower_case_needed = $var;

        return $this;
    }

    /**
     * there is no numerics in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool numeric_needed = 5;</code>
     * @return bool
     */
    public function getNumericNeeded()
    {
        return $this->numeric_needed;
    }

    /**
     * there is no numerics in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool numeric_needed = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setNumericNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->numeric_needed = $var;

        return $this;
    }

    /**
     * there is no special character in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool non_alphanumeric_needed = 6;</code>
     * @return bool
     */
    public function getNonAlphanumericNeeded()
    {
        return $this->non_alphanumeric_needed;
    }

    /**
     * there is no special character in the new password when there should be at least one
     *
     * Generated from protobuf field <code>bool non_alphanumeric_needed = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setNonAlphanumericNeeded($var)
    {
        GPBUtil::checkBool($var);
        $this->non_alphanumeric_needed = $var;

        return $this;
    }

    /**
     * when one of the N most recent old password is reused, N is specified by password_reuse_epoch in db.password_policies
     *
     * Generated from protobuf field <code>bool password_reuse = 7;</code>
     * @return bool
     */
    public function getPasswordReuse()
    {
        return $this->password_reuse;
    }

    /**
     * when one of the N most recent old password is reused, N is specified by password_reuse_epoch in db.password_policies
     *
     * Generated from protobuf field <code>bool password_reuse = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setPasswordReuse($var)
    {
        GPBUtil::checkBool($var);
        $this->password_reuse = $var;

        return $this;
    }

    /**
     * when either user's first, middle or last name is used in the new password
     *
     * Generated from protobuf field <code>bool exclude_names = 8;</code>
     * @return bool
     */
    public function getExcludeNames()
    {
        return $this->exclude_names;
    }

    /**
     * when either user's first, middle or last name is used in the new password
     *
     * Generated from protobuf field <code>bool exclude_names = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setExcludeNames($var)
    {
        GPBUtil::checkBool($var);
        $this->exclude_names = $var;

        return $this;
    }

    /**
     * when first part of user's email (exact string or after removing special characters) is used in the new password
     *
     * Generated from protobuf field <code>bool exclude_email = 9;</code>
     * @return bool
     */
    public function getExcludeEmail()
    {
        return $this->exclude_email;
    }

    /**
     * when first part of user's email (exact string or after removing special characters) is used in the new password
     *
     * Generated from protobuf field <code>bool exclude_email = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setExcludeEmail($var)
    {
        GPBUtil::checkBool($var);
        $this->exclude_email = $var;

        return $this;
    }

    /**
     * when there are confusing letters in the new password, such as o (first character of 'omega') vs 0 (zero)
     *
     * Generated from protobuf field <code>bool no_confusing_letters = 10;</code>
     * @return bool
     */
    public function getNoConfusingLetters()
    {
        return $this->no_confusing_letters;
    }

    /**
     * when there are confusing letters in the new password, such as o (first character of 'omega') vs 0 (zero)
     *
     * Generated from protobuf field <code>bool no_confusing_letters = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoConfusingLetters($var)
    {
        GPBUtil::checkBool($var);
        $this->no_confusing_letters = $var;

        return $this;
    }

    /**
     * when there are simple password patterns used, such as 12345678 or aaaaaaa1
     *
     * Generated from protobuf field <code>bool no_simple_passwords = 11;</code>
     * @return bool
     */
    public function getNoSimplePasswords()
    {
        return $this->no_simple_passwords;
    }

    /**
     * when there are simple password patterns used, such as 12345678 or aaaaaaa1
     *
     * Generated from protobuf field <code>bool no_simple_passwords = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoSimplePasswords($var)
    {
        GPBUtil::checkBool($var);
        $this->no_simple_passwords = $var;

        return $this;
    }

    /**
     * when there are common vocabs from the common vocab list used
     *
     * Generated from protobuf field <code>bool no_common_vocabs = 12;</code>
     * @return bool
     */
    public function getNoCommonVocabs()
    {
        return $this->no_common_vocabs;
    }

    /**
     * when there are common vocabs from the common vocab list used
     *
     * Generated from protobuf field <code>bool no_common_vocabs = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoCommonVocabs($var)
    {
        GPBUtil::checkBool($var);
        $this->no_common_vocabs = $var;

        return $this;
    }

    /**
     * when the current password is contained in the new password or vice versa
     *
     * Generated from protobuf field <code>bool no_overlap_with_old = 13;</code>
     * @return bool
     */
    public function getNoOverlapWithOld()
    {
        return $this->no_overlap_with_old;
    }

    /**
     * when the current password is contained in the new password or vice versa
     *
     * Generated from protobuf field <code>bool no_overlap_with_old = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setNoOverlapWithOld($var)
    {
        GPBUtil::checkBool($var);
        $this->no_overlap_with_old = $var;

        return $this;
    }

    /**
     * when password has to be changed becauase it's too old
     *
     * Generated from protobuf field <code>bool password_lifespan = 14;</code>
     * @return bool
     */
    public function getPasswordLifespan()
    {
        return $this->password_lifespan;
    }

    /**
     * when password has to be changed becauase it's too old
     *
     * Generated from protobuf field <code>bool password_lifespan = 14;</code>
     * @param bool $var
     * @return $this
     */
    public function setPasswordLifespan($var)
    {
        GPBUtil::checkBool($var);
        $this->password_lifespan = $var;

        return $this;
    }

}

