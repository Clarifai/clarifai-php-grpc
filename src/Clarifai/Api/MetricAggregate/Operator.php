<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api\MetricAggregate;

use UnexpectedValueException;

/**
 * Protobuf type <code>clarifai.api.MetricAggregate.Operator</code>
 */
class Operator
{
    /**
     * Generated from protobuf enum <code>OPERATOR_NOT_SET = 0;</code>
     */
    const OPERATOR_NOT_SET = 0;
    /**
     * Generated from protobuf enum <code>AVG = 1;</code>
     */
    const AVG = 1;
    /**
     * Generated from protobuf enum <code>SUM = 2;</code>
     */
    const SUM = 2;
    /**
     * Generated from protobuf enum <code>MAX = 3;</code>
     */
    const MAX = 3;
    /**
     * Generated from protobuf enum <code>MIN = 4;</code>
     */
    const MIN = 4;
    /**
     * Generated from protobuf enum <code>P95 = 5;</code>
     */
    const P95 = 5;
    /**
     * Generated from protobuf enum <code>P99 = 6;</code>
     */
    const P99 = 6;
    /**
     * Generated from protobuf enum <code>P50 = 7;</code>
     */
    const P50 = 7;
    /**
     * Generated from protobuf enum <code>COUNT = 8;</code>
     */
    const COUNT = 8;

    private static $valueToName = [
        self::OPERATOR_NOT_SET => 'OPERATOR_NOT_SET',
        self::AVG => 'AVG',
        self::SUM => 'SUM',
        self::MAX => 'MAX',
        self::MIN => 'MIN',
        self::P95 => 'P95',
        self::P99 => 'P99',
        self::P50 => 'P50',
        self::COUNT => 'COUNT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Operator::class, \Clarifai\Api\MetricAggregate_Operator::class);

