<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * License
 *
 * Generated from protobuf message <code>clarifai.api.License</code>
 */
class License extends \Google\Protobuf\Internal\Message
{
    /**
     * License Key, ID of license from users' perspective
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * The operations allowed under the license (instead of repeated field we could create combined scopes eg PREDICT_TRAIN)
     *
     * Generated from protobuf field <code>.clarifai.api.LicenseScope scope = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     */
    protected $scope = 0;
    /**
     * Expiration date and time (optional). Can work by itself and/or in conjunction with the maximum number of operations
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expires_at = 3;</code>
     */
    protected $expires_at = null;
    /**
     * Action to be taken in case deployment expires
     *
     * Generated from protobuf field <code>.clarifai.api.ExpirationAction expiration_action = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     */
    protected $expiration_action = 0;
    /**
     * Array of models covered by the license
     *
     * Generated from protobuf field <code>repeated .clarifai.api.LicenseLimit limits = 5;</code>
     */
    private $limits;
    /**
     * the status of this license
     *
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 6;</code>
     */
    protected $status = null;
    /**
     * If the license is off-line license, if yes, on prem instance will not validate it with platform.
     *
     * Generated from protobuf field <code>bool is_offline = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     */
    protected $is_offline = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           License Key, ID of license from users' perspective
     *     @type int $scope
     *           The operations allowed under the license (instead of repeated field we could create combined scopes eg PREDICT_TRAIN)
     *     @type \Google\Protobuf\Timestamp $expires_at
     *           Expiration date and time (optional). Can work by itself and/or in conjunction with the maximum number of operations
     *     @type int $expiration_action
     *           Action to be taken in case deployment expires
     *     @type \Clarifai\Api\LicenseLimit[]|\Google\Protobuf\Internal\RepeatedField $limits
     *           Array of models covered by the license
     *     @type \Clarifai\Api\Status\Status $status
     *           the status of this license
     *     @type bool $is_offline
     *           If the license is off-line license, if yes, on prem instance will not validate it with platform.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * License Key, ID of license from users' perspective
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * License Key, ID of license from users' perspective
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * The operations allowed under the license (instead of repeated field we could create combined scopes eg PREDICT_TRAIN)
     *
     * Generated from protobuf field <code>.clarifai.api.LicenseScope scope = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @return int
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * The operations allowed under the license (instead of repeated field we could create combined scopes eg PREDICT_TRAIN)
     *
     * Generated from protobuf field <code>.clarifai.api.LicenseScope scope = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @param int $var
     * @return $this
     */
    public function setScope($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\LicenseScope::class);
        $this->scope = $var;

        return $this;
    }

    /**
     * Expiration date and time (optional). Can work by itself and/or in conjunction with the maximum number of operations
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expires_at = 3;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getExpiresAt()
    {
        return $this->expires_at;
    }

    public function hasExpiresAt()
    {
        return isset($this->expires_at);
    }

    public function clearExpiresAt()
    {
        unset($this->expires_at);
    }

    /**
     * Expiration date and time (optional). Can work by itself and/or in conjunction with the maximum number of operations
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expires_at = 3;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setExpiresAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->expires_at = $var;

        return $this;
    }

    /**
     * Action to be taken in case deployment expires
     *
     * Generated from protobuf field <code>.clarifai.api.ExpirationAction expiration_action = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @return int
     */
    public function getExpirationAction()
    {
        return $this->expiration_action;
    }

    /**
     * Action to be taken in case deployment expires
     *
     * Generated from protobuf field <code>.clarifai.api.ExpirationAction expiration_action = 4 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @param int $var
     * @return $this
     */
    public function setExpirationAction($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\ExpirationAction::class);
        $this->expiration_action = $var;

        return $this;
    }

    /**
     * Array of models covered by the license
     *
     * Generated from protobuf field <code>repeated .clarifai.api.LicenseLimit limits = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLimits()
    {
        return $this->limits;
    }

    /**
     * Array of models covered by the license
     *
     * Generated from protobuf field <code>repeated .clarifai.api.LicenseLimit limits = 5;</code>
     * @param \Clarifai\Api\LicenseLimit[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLimits($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Clarifai\Api\LicenseLimit::class);
        $this->limits = $arr;

        return $this;
    }

    /**
     * the status of this license
     *
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 6;</code>
     * @return \Clarifai\Api\Status\Status|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    public function hasStatus()
    {
        return isset($this->status);
    }

    public function clearStatus()
    {
        unset($this->status);
    }

    /**
     * the status of this license
     *
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 6;</code>
     * @param \Clarifai\Api\Status\Status $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Status\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * If the license is off-line license, if yes, on prem instance will not validate it with platform.
     *
     * Generated from protobuf field <code>bool is_offline = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @return bool
     */
    public function getIsOffline()
    {
        return $this->is_offline;
    }

    /**
     * If the license is off-line license, if yes, on prem instance will not validate it with platform.
     *
     * Generated from protobuf field <code>bool is_offline = 7 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @param bool $var
     * @return $this
     */
    public function setIsOffline($var)
    {
        GPBUtil::checkBool($var);
        $this->is_offline = $var;

        return $this;
    }

}

