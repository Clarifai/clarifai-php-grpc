<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/service.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>clarifai.api.TestMessage</code>
 */
class TestMessage extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 1;</code>
     */
    protected $status = null;
    /**
     * Generated from protobuf field <code>string value = 2;</code>
     */
    protected $value = '';
    /**
     * Generated from protobuf field <code>bytes byts = 3;</code>
     */
    protected $byts = '';
    /**
     * Generated from protobuf field <code>uint32 int_32 = 4;</code>
     */
    protected $int_32 = 0;
    /**
     * Generated from protobuf field <code>uint64 int_64 = 5;</code>
     */
    protected $int_64 = 0;
    /**
     * Generated from protobuf field <code>float f_32 = 6;</code>
     */
    protected $f_32 = 0.0;
    /**
     * Generated from protobuf field <code>double f_64 = 7;</code>
     */
    protected $f_64 = 0.0;
    /**
     * To handle arbitrary json you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct s = 8;</code>
     */
    protected $s = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Clarifai\Api\Status\Status $status
     *     @type string $value
     *     @type string $byts
     *     @type int $int_32
     *     @type int|string $int_64
     *     @type float $f_32
     *     @type float $f_64
     *     @type \Google\Protobuf\Struct $s
     *           To handle arbitrary json you can use a struct field:
     *           https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 1;</code>
     * @return \Clarifai\Api\Status\Status|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    public function hasStatus()
    {
        return isset($this->status);
    }

    public function clearStatus()
    {
        unset($this->status);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 1;</code>
     * @param \Clarifai\Api\Status\Status $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Status\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string value = 2;</code>
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Generated from protobuf field <code>string value = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->value = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bytes byts = 3;</code>
     * @return string
     */
    public function getByts()
    {
        return $this->byts;
    }

    /**
     * Generated from protobuf field <code>bytes byts = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setByts($var)
    {
        GPBUtil::checkString($var, False);
        $this->byts = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 int_32 = 4;</code>
     * @return int
     */
    public function getInt32()
    {
        return $this->int_32;
    }

    /**
     * Generated from protobuf field <code>uint32 int_32 = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setInt32($var)
    {
        GPBUtil::checkUint32($var);
        $this->int_32 = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint64 int_64 = 5;</code>
     * @return int|string
     */
    public function getInt64()
    {
        return $this->int_64;
    }

    /**
     * Generated from protobuf field <code>uint64 int_64 = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setInt64($var)
    {
        GPBUtil::checkUint64($var);
        $this->int_64 = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>float f_32 = 6;</code>
     * @return float
     */
    public function getF32()
    {
        return $this->f_32;
    }

    /**
     * Generated from protobuf field <code>float f_32 = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setF32($var)
    {
        GPBUtil::checkFloat($var);
        $this->f_32 = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double f_64 = 7;</code>
     * @return float
     */
    public function getF64()
    {
        return $this->f_64;
    }

    /**
     * Generated from protobuf field <code>double f_64 = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setF64($var)
    {
        GPBUtil::checkDouble($var);
        $this->f_64 = $var;

        return $this;
    }

    /**
     * To handle arbitrary json you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct s = 8;</code>
     * @return \Google\Protobuf\Struct|null
     */
    public function getS()
    {
        return $this->s;
    }

    public function hasS()
    {
        return isset($this->s);
    }

    public function clearS()
    {
        unset($this->s);
    }

    /**
     * To handle arbitrary json you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct s = 8;</code>
     * @param \Google\Protobuf\Struct $var
     * @return $this
     */
    public function setS($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Struct::class);
        $this->s = $var;

        return $this;
    }

}

