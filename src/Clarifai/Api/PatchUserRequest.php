<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/service.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This is how you to patch the user object.
 * If info.user_id is set then no other field can be set because it's an expensive and dangerous operation.
 * All other top level and nested fields can be set separately together.
 *
 * Generated from protobuf message <code>clarifai.api.PatchUserRequest</code>
 */
class PatchUserRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Provide user id to update.
     * An organization user can update only their own information.
     * An organization admin can update the information of any user in the organization.
     *
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 7;</code>
     */
    protected $user_app_id = null;
    /**
     * Request to update user information.
     *
     * Generated from protobuf field <code>.clarifai.api.UserInfo info = 2;</code>
     */
    protected $info = null;
    /**
     * Request to update password
     *
     * Generated from protobuf field <code>.clarifai.api.UserPassword pass = 3;</code>
     */
    protected $pass = null;
    /**
     * To handle arbitrary json metadata you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 4;</code>
     */
    protected $metadata = null;
    /**
     * Generated from protobuf field <code>.clarifai.api.PatchAction action = 5;</code>
     */
    protected $action = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Clarifai\Api\UserAppIDSet $user_app_id
     *           Provide user id to update.
     *           An organization user can update only their own information.
     *           An organization admin can update the information of any user in the organization.
     *     @type \Clarifai\Api\UserInfo $info
     *           Request to update user information.
     *     @type \Clarifai\Api\UserPassword $pass
     *           Request to update password
     *     @type \Google\Protobuf\Struct $metadata
     *           To handle arbitrary json metadata you can use a struct field:
     *           https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *     @type \Clarifai\Api\PatchAction $action
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * Provide user id to update.
     * An organization user can update only their own information.
     * An organization admin can update the information of any user in the organization.
     *
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 7;</code>
     * @return \Clarifai\Api\UserAppIDSet|null
     */
    public function getUserAppId()
    {
        return $this->user_app_id;
    }

    public function hasUserAppId()
    {
        return isset($this->user_app_id);
    }

    public function clearUserAppId()
    {
        unset($this->user_app_id);
    }

    /**
     * Provide user id to update.
     * An organization user can update only their own information.
     * An organization admin can update the information of any user in the organization.
     *
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 7;</code>
     * @param \Clarifai\Api\UserAppIDSet $var
     * @return $this
     */
    public function setUserAppId($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\UserAppIDSet::class);
        $this->user_app_id = $var;

        return $this;
    }

    /**
     * Request to update user information.
     *
     * Generated from protobuf field <code>.clarifai.api.UserInfo info = 2;</code>
     * @return \Clarifai\Api\UserInfo|null
     */
    public function getInfo()
    {
        return $this->info;
    }

    public function hasInfo()
    {
        return isset($this->info);
    }

    public function clearInfo()
    {
        unset($this->info);
    }

    /**
     * Request to update user information.
     *
     * Generated from protobuf field <code>.clarifai.api.UserInfo info = 2;</code>
     * @param \Clarifai\Api\UserInfo $var
     * @return $this
     */
    public function setInfo($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\UserInfo::class);
        $this->info = $var;

        return $this;
    }

    /**
     * Request to update password
     *
     * Generated from protobuf field <code>.clarifai.api.UserPassword pass = 3;</code>
     * @return \Clarifai\Api\UserPassword|null
     */
    public function getPass()
    {
        return $this->pass;
    }

    public function hasPass()
    {
        return isset($this->pass);
    }

    public function clearPass()
    {
        unset($this->pass);
    }

    /**
     * Request to update password
     *
     * Generated from protobuf field <code>.clarifai.api.UserPassword pass = 3;</code>
     * @param \Clarifai\Api\UserPassword $var
     * @return $this
     */
    public function setPass($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\UserPassword::class);
        $this->pass = $var;

        return $this;
    }

    /**
     * To handle arbitrary json metadata you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 4;</code>
     * @return \Google\Protobuf\Struct|null
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    public function hasMetadata()
    {
        return isset($this->metadata);
    }

    public function clearMetadata()
    {
        unset($this->metadata);
    }

    /**
     * To handle arbitrary json metadata you can use a struct field:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 4;</code>
     * @param \Google\Protobuf\Struct $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Struct::class);
        $this->metadata = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.PatchAction action = 5;</code>
     * @return \Clarifai\Api\PatchAction|null
     */
    public function getAction()
    {
        return $this->action;
    }

    public function hasAction()
    {
        return isset($this->action);
    }

    public function clearAction()
    {
        unset($this->action);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.PatchAction action = 5;</code>
     * @param \Clarifai\Api\PatchAction $var
     * @return $this
     */
    public function setAction($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\PatchAction::class);
        $this->action = $var;

        return $this;
    }

}

