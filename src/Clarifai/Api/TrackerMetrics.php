<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * TrackerMetrics
 *
 * Generated from protobuf message <code>clarifai.api.TrackerMetrics</code>
 */
class TrackerMetrics extends \Google\Protobuf\Internal\Message
{
    /**
     * Multiple object tracking accuracy
     *
     * Generated from protobuf field <code>float mot_mota = 1;</code>
     */
    protected $mot_mota = 0.0;
    /**
     * Number of switches between tracks
     *
     * Generated from protobuf field <code>int32 mot_num_switches = 2;</code>
     */
    protected $mot_num_switches = 0;
    /**
     * MORSE fragmentation rate (a.k.a unique switch rate, only calculated in public sector)
     *
     * Generated from protobuf field <code>float morse_frag = 3;</code>
     */
    protected $morse_frag = 0.0;
    /**
     * Average precision calculated from all processed frames
     *
     * Generated from protobuf field <code>float avg_precision = 4;</code>
     */
    protected $avg_precision = 0.0;
    /**
     * The concept that we are evaluating the tracker
     *
     * Generated from protobuf field <code>string aiid = 5;</code>
     */
    protected $aiid = '';
    /**
     * Same as morse_frag but calculated using MOT mapping/metrics
     *
     * Generated from protobuf field <code>float unique_switch_rate = 6;</code>
     */
    protected $unique_switch_rate = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $mot_mota
     *           Multiple object tracking accuracy
     *     @type int $mot_num_switches
     *           Number of switches between tracks
     *     @type float $morse_frag
     *           MORSE fragmentation rate (a.k.a unique switch rate, only calculated in public sector)
     *     @type float $avg_precision
     *           Average precision calculated from all processed frames
     *     @type string $aiid
     *           The concept that we are evaluating the tracker
     *     @type float $unique_switch_rate
     *           Same as morse_frag but calculated using MOT mapping/metrics
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * Multiple object tracking accuracy
     *
     * Generated from protobuf field <code>float mot_mota = 1;</code>
     * @return float
     */
    public function getMotMota()
    {
        return $this->mot_mota;
    }

    /**
     * Multiple object tracking accuracy
     *
     * Generated from protobuf field <code>float mot_mota = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setMotMota($var)
    {
        GPBUtil::checkFloat($var);
        $this->mot_mota = $var;

        return $this;
    }

    /**
     * Number of switches between tracks
     *
     * Generated from protobuf field <code>int32 mot_num_switches = 2;</code>
     * @return int
     */
    public function getMotNumSwitches()
    {
        return $this->mot_num_switches;
    }

    /**
     * Number of switches between tracks
     *
     * Generated from protobuf field <code>int32 mot_num_switches = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setMotNumSwitches($var)
    {
        GPBUtil::checkInt32($var);
        $this->mot_num_switches = $var;

        return $this;
    }

    /**
     * MORSE fragmentation rate (a.k.a unique switch rate, only calculated in public sector)
     *
     * Generated from protobuf field <code>float morse_frag = 3;</code>
     * @return float
     */
    public function getMorseFrag()
    {
        return $this->morse_frag;
    }

    /**
     * MORSE fragmentation rate (a.k.a unique switch rate, only calculated in public sector)
     *
     * Generated from protobuf field <code>float morse_frag = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setMorseFrag($var)
    {
        GPBUtil::checkFloat($var);
        $this->morse_frag = $var;

        return $this;
    }

    /**
     * Average precision calculated from all processed frames
     *
     * Generated from protobuf field <code>float avg_precision = 4;</code>
     * @return float
     */
    public function getAvgPrecision()
    {
        return $this->avg_precision;
    }

    /**
     * Average precision calculated from all processed frames
     *
     * Generated from protobuf field <code>float avg_precision = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setAvgPrecision($var)
    {
        GPBUtil::checkFloat($var);
        $this->avg_precision = $var;

        return $this;
    }

    /**
     * The concept that we are evaluating the tracker
     *
     * Generated from protobuf field <code>string aiid = 5;</code>
     * @return string
     */
    public function getAiid()
    {
        return $this->aiid;
    }

    /**
     * The concept that we are evaluating the tracker
     *
     * Generated from protobuf field <code>string aiid = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setAiid($var)
    {
        GPBUtil::checkString($var, True);
        $this->aiid = $var;

        return $this;
    }

    /**
     * Same as morse_frag but calculated using MOT mapping/metrics
     *
     * Generated from protobuf field <code>float unique_switch_rate = 6;</code>
     * @return float
     */
    public function getUniqueSwitchRate()
    {
        return $this->unique_switch_rate;
    }

    /**
     * Same as morse_frag but calculated using MOT mapping/metrics
     *
     * Generated from protobuf field <code>float unique_switch_rate = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setUniqueSwitchRate($var)
    {
        GPBUtil::checkFloat($var);
        $this->unique_switch_rate = $var;

        return $this;
    }

}

