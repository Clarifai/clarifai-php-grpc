<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>clarifai.api.InputsUpload</code>
 */
class InputsUpload extends \Google\Protobuf\Internal\Message
{
    /**
     * Collect statistics about created inputs in job with given ID.
     * * If job ID is empty, then job is automatically created with random ID.
     * * If job ID is non-empty, then a new job will be created with given ID.
     *
     * Generated from protobuf field <code>string inputs_add_job_id = 1;</code>
     */
    protected $inputs_add_job_id = '';
    /**
     * Personal Access Token to the application to which inputs are added
     *
     * Generated from protobuf field <code>string app_pat = 2;</code>
     */
    protected $app_pat = '';
    /**
     * Generated from protobuf field <code>.clarifai.api.Upload upload = 3;</code>
     */
    protected $upload = null;
    /**
     * How to handle input ID conflicts.
     *
     * Generated from protobuf field <code>.clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 4;</code>
     */
    protected $input_id_conflict_resolution = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $inputs_add_job_id
     *           Collect statistics about created inputs in job with given ID.
     *           * If job ID is empty, then job is automatically created with random ID.
     *           * If job ID is non-empty, then a new job will be created with given ID.
     *     @type string $app_pat
     *           Personal Access Token to the application to which inputs are added
     *     @type \Clarifai\Api\Upload $upload
     *     @type int $input_id_conflict_resolution
     *           How to handle input ID conflicts.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * Collect statistics about created inputs in job with given ID.
     * * If job ID is empty, then job is automatically created with random ID.
     * * If job ID is non-empty, then a new job will be created with given ID.
     *
     * Generated from protobuf field <code>string inputs_add_job_id = 1;</code>
     * @return string
     */
    public function getInputsAddJobId()
    {
        return $this->inputs_add_job_id;
    }

    /**
     * Collect statistics about created inputs in job with given ID.
     * * If job ID is empty, then job is automatically created with random ID.
     * * If job ID is non-empty, then a new job will be created with given ID.
     *
     * Generated from protobuf field <code>string inputs_add_job_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setInputsAddJobId($var)
    {
        GPBUtil::checkString($var, True);
        $this->inputs_add_job_id = $var;

        return $this;
    }

    /**
     * Personal Access Token to the application to which inputs are added
     *
     * Generated from protobuf field <code>string app_pat = 2;</code>
     * @return string
     */
    public function getAppPat()
    {
        return $this->app_pat;
    }

    /**
     * Personal Access Token to the application to which inputs are added
     *
     * Generated from protobuf field <code>string app_pat = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAppPat($var)
    {
        GPBUtil::checkString($var, True);
        $this->app_pat = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Upload upload = 3;</code>
     * @return \Clarifai\Api\Upload|null
     */
    public function getUpload()
    {
        return $this->upload;
    }

    public function hasUpload()
    {
        return isset($this->upload);
    }

    public function clearUpload()
    {
        unset($this->upload);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Upload upload = 3;</code>
     * @param \Clarifai\Api\Upload $var
     * @return $this
     */
    public function setUpload($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Upload::class);
        $this->upload = $var;

        return $this;
    }

    /**
     * How to handle input ID conflicts.
     *
     * Generated from protobuf field <code>.clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 4;</code>
     * @return int
     */
    public function getInputIdConflictResolution()
    {
        return $this->input_id_conflict_resolution;
    }

    /**
     * How to handle input ID conflicts.
     *
     * Generated from protobuf field <code>.clarifai.api.InputIDConflictResolution input_id_conflict_resolution = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setInputIdConflictResolution($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\InputIDConflictResolution::class);
        $this->input_id_conflict_resolution = $var;

        return $this;
    }

}

