<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A deployment allows you to configure how runners for a particular type of resource will
 * scale up and down. These are unique per user_id, nodepool and model so for differnet nodepools
 * you can scale differently.
 *
 * Generated from protobuf message <code>clarifai.api.Deployment</code>
 */
class Deployment extends \Google\Protobuf\Internal\Message
{
    /**
     * An id for this configured deployment.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * The user who owns the deployment. These live in the user/org account.
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     */
    protected $user_id = '';
    /**
     * How to autoscale the object.
     *
     * Generated from protobuf field <code>.clarifai.api.AutoscaleConfig autoscale_config = 3;</code>
     */
    protected $autoscale_config = null;
    /**
     * You can configure different autoscaling per nodepool(s).
     * These nodepools have to be also owned by the same user_id/org as this deployment.
     * If there is more than one nodepool we use the model's ComputeInfo to match
     * with what the nodepool provides to decide which one can handle it combined with the
     * NodepoolRank below. Note: even within a single nodepool if it is heterogeneous then
     * we need a way to rank scheduling choices when we don't know how to decide (like a model
     * supports
     *
     * Generated from protobuf field <code>repeated .clarifai.api.Nodepool nodepools = 4;</code>
     */
    private $nodepools;
    /**
     * Generated from protobuf field <code>.clarifai.api.Deployment.SchedulingChoice scheduling_choice = 7;</code>
     */
    protected $scheduling_choice = 0;
    /**
     * The visibility field represents whether this message is privately/publicly visible.
     * To be visible to the public the App that contains it AND the User that contains the App must
     * also be publicly visible.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 8;</code>
     */
    protected $visibility = null;
    /**
     * To handle arbitrary json metadata:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 9;</code>
     */
    protected $metadata = null;
    /**
     * Short description of deployment.
     *
     * Generated from protobuf field <code>string description = 10;</code>
     */
    protected $description = '';
    /**
     * The thing that the autoscaling config applies to for this nodepool.
     * For a given user_id, nodepool_id, and object ID we can only have one deployment as it defines
     *
     * Generated from protobuf field <code>.clarifai.api.Worker worker = 11;</code>
     */
    protected $worker = null;
    /**
     * When the deployment was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 12;</code>
     */
    protected $created_at = null;
    /**
     * When the deployment was last modified.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 13;</code>
     */
    protected $modified_at = null;
    /**
     * When to always deploy latest model version
     *
     * Generated from protobuf field <code>bool deploy_latest_version = 14;</code>
     */
    protected $deploy_latest_version = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           An id for this configured deployment.
     *     @type string $user_id
     *           The user who owns the deployment. These live in the user/org account.
     *     @type \Clarifai\Api\AutoscaleConfig $autoscale_config
     *           How to autoscale the object.
     *     @type array<\Clarifai\Api\Nodepool>|\Google\Protobuf\Internal\RepeatedField $nodepools
     *           You can configure different autoscaling per nodepool(s).
     *           These nodepools have to be also owned by the same user_id/org as this deployment.
     *           If there is more than one nodepool we use the model's ComputeInfo to match
     *           with what the nodepool provides to decide which one can handle it combined with the
     *           NodepoolRank below. Note: even within a single nodepool if it is heterogeneous then
     *           we need a way to rank scheduling choices when we don't know how to decide (like a model
     *           supports
     *     @type int $scheduling_choice
     *     @type \Clarifai\Api\Visibility $visibility
     *           The visibility field represents whether this message is privately/publicly visible.
     *           To be visible to the public the App that contains it AND the User that contains the App must
     *           also be publicly visible.
     *     @type \Google\Protobuf\Struct $metadata
     *           To handle arbitrary json metadata:
     *           https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *     @type string $description
     *           Short description of deployment.
     *     @type \Clarifai\Api\Worker $worker
     *           The thing that the autoscaling config applies to for this nodepool.
     *           For a given user_id, nodepool_id, and object ID we can only have one deployment as it defines
     *     @type \Google\Protobuf\Timestamp $created_at
     *           When the deployment was created.
     *     @type \Google\Protobuf\Timestamp $modified_at
     *           When the deployment was last modified.
     *     @type bool $deploy_latest_version
     *           When to always deploy latest model version
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * An id for this configured deployment.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * An id for this configured deployment.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * The user who owns the deployment. These live in the user/org account.
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     * @return string
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * The user who owns the deployment. These live in the user/org account.
     *
     * Generated from protobuf field <code>string user_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setUserId($var)
    {
        GPBUtil::checkString($var, True);
        $this->user_id = $var;

        return $this;
    }

    /**
     * How to autoscale the object.
     *
     * Generated from protobuf field <code>.clarifai.api.AutoscaleConfig autoscale_config = 3;</code>
     * @return \Clarifai\Api\AutoscaleConfig|null
     */
    public function getAutoscaleConfig()
    {
        return $this->autoscale_config;
    }

    public function hasAutoscaleConfig()
    {
        return isset($this->autoscale_config);
    }

    public function clearAutoscaleConfig()
    {
        unset($this->autoscale_config);
    }

    /**
     * How to autoscale the object.
     *
     * Generated from protobuf field <code>.clarifai.api.AutoscaleConfig autoscale_config = 3;</code>
     * @param \Clarifai\Api\AutoscaleConfig $var
     * @return $this
     */
    public function setAutoscaleConfig($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\AutoscaleConfig::class);
        $this->autoscale_config = $var;

        return $this;
    }

    /**
     * You can configure different autoscaling per nodepool(s).
     * These nodepools have to be also owned by the same user_id/org as this deployment.
     * If there is more than one nodepool we use the model's ComputeInfo to match
     * with what the nodepool provides to decide which one can handle it combined with the
     * NodepoolRank below. Note: even within a single nodepool if it is heterogeneous then
     * we need a way to rank scheduling choices when we don't know how to decide (like a model
     * supports
     *
     * Generated from protobuf field <code>repeated .clarifai.api.Nodepool nodepools = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getNodepools()
    {
        return $this->nodepools;
    }

    /**
     * You can configure different autoscaling per nodepool(s).
     * These nodepools have to be also owned by the same user_id/org as this deployment.
     * If there is more than one nodepool we use the model's ComputeInfo to match
     * with what the nodepool provides to decide which one can handle it combined with the
     * NodepoolRank below. Note: even within a single nodepool if it is heterogeneous then
     * we need a way to rank scheduling choices when we don't know how to decide (like a model
     * supports
     *
     * Generated from protobuf field <code>repeated .clarifai.api.Nodepool nodepools = 4;</code>
     * @param array<\Clarifai\Api\Nodepool>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setNodepools($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Clarifai\Api\Nodepool::class);
        $this->nodepools = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Deployment.SchedulingChoice scheduling_choice = 7;</code>
     * @return int
     */
    public function getSchedulingChoice()
    {
        return $this->scheduling_choice;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Deployment.SchedulingChoice scheduling_choice = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setSchedulingChoice($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\Deployment\SchedulingChoice::class);
        $this->scheduling_choice = $var;

        return $this;
    }

    /**
     * The visibility field represents whether this message is privately/publicly visible.
     * To be visible to the public the App that contains it AND the User that contains the App must
     * also be publicly visible.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 8;</code>
     * @return \Clarifai\Api\Visibility|null
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    public function hasVisibility()
    {
        return isset($this->visibility);
    }

    public function clearVisibility()
    {
        unset($this->visibility);
    }

    /**
     * The visibility field represents whether this message is privately/publicly visible.
     * To be visible to the public the App that contains it AND the User that contains the App must
     * also be publicly visible.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 8;</code>
     * @param \Clarifai\Api\Visibility $var
     * @return $this
     */
    public function setVisibility($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Visibility::class);
        $this->visibility = $var;

        return $this;
    }

    /**
     * To handle arbitrary json metadata:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 9;</code>
     * @return \Google\Protobuf\Struct|null
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    public function hasMetadata()
    {
        return isset($this->metadata);
    }

    public function clearMetadata()
    {
        unset($this->metadata);
    }

    /**
     * To handle arbitrary json metadata:
     * https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto
     *
     * Generated from protobuf field <code>.google.protobuf.Struct metadata = 9;</code>
     * @param \Google\Protobuf\Struct $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Struct::class);
        $this->metadata = $var;

        return $this;
    }

    /**
     * Short description of deployment.
     *
     * Generated from protobuf field <code>string description = 10;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Short description of deployment.
     *
     * Generated from protobuf field <code>string description = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * The thing that the autoscaling config applies to for this nodepool.
     * For a given user_id, nodepool_id, and object ID we can only have one deployment as it defines
     *
     * Generated from protobuf field <code>.clarifai.api.Worker worker = 11;</code>
     * @return \Clarifai\Api\Worker|null
     */
    public function getWorker()
    {
        return $this->worker;
    }

    public function hasWorker()
    {
        return isset($this->worker);
    }

    public function clearWorker()
    {
        unset($this->worker);
    }

    /**
     * The thing that the autoscaling config applies to for this nodepool.
     * For a given user_id, nodepool_id, and object ID we can only have one deployment as it defines
     *
     * Generated from protobuf field <code>.clarifai.api.Worker worker = 11;</code>
     * @param \Clarifai\Api\Worker $var
     * @return $this
     */
    public function setWorker($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Worker::class);
        $this->worker = $var;

        return $this;
    }

    /**
     * When the deployment was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 12;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    public function hasCreatedAt()
    {
        return isset($this->created_at);
    }

    public function clearCreatedAt()
    {
        unset($this->created_at);
    }

    /**
     * When the deployment was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 12;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreatedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created_at = $var;

        return $this;
    }

    /**
     * When the deployment was last modified.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 13;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getModifiedAt()
    {
        return $this->modified_at;
    }

    public function hasModifiedAt()
    {
        return isset($this->modified_at);
    }

    public function clearModifiedAt()
    {
        unset($this->modified_at);
    }

    /**
     * When the deployment was last modified.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 13;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setModifiedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->modified_at = $var;

        return $this;
    }

    /**
     * When to always deploy latest model version
     *
     * Generated from protobuf field <code>bool deploy_latest_version = 14;</code>
     * @return bool
     */
    public function getDeployLatestVersion()
    {
        return $this->deploy_latest_version;
    }

    /**
     * When to always deploy latest model version
     *
     * Generated from protobuf field <code>bool deploy_latest_version = 14;</code>
     * @param bool $var
     * @return $this
     */
    public function setDeployLatestVersion($var)
    {
        GPBUtil::checkBool($var);
        $this->deploy_latest_version = $var;

        return $this;
    }

}

