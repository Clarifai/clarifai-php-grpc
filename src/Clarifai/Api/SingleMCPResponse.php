<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/service.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * MCP response format as defined here
 * https://modelcontextprotocol.io/docs/concepts/transports#responses
 *
 * Generated from protobuf message <code>clarifai.api.SingleMCPResponse</code>
 */
class SingleMCPResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * This is always "2.0"
     *
     * Generated from protobuf field <code>string jsonrpc = 1;</code>
     */
    protected $jsonrpc = '';
    /**
     * The id as an int. Note: the protocol says string | number. int64 becomes a string.
     * All clients tests so far are using numbers.
     * protobuf and grpc-gateway have no simple way to handle this OR in a type
     * if needed we can add another option to our jsonpb parser.
     * We have to return even empty (id=0) id.
     *
     * Generated from protobuf field <code>uint32 id = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     */
    protected $id = 0;
    /**
     * The result of the call. Struct is used to represent a JSON object.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct result = 3;</code>
     */
    protected $result = null;
    /**
     * An error if returned from the MCP.
     *
     * Generated from protobuf field <code>.clarifai.api.MCPError error = 4;</code>
     */
    protected $error = null;
    /**
     * Have to add this for our API validation but shouldn't be returned in most cases.
     * It may be filled in for Accepted or Allowed responses that are part of the protocol
     * but that didn't seem to be an issue.
     *
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 5;</code>
     */
    protected $status = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $jsonrpc
     *           This is always "2.0"
     *     @type int $id
     *           The id as an int. Note: the protocol says string | number. int64 becomes a string.
     *           All clients tests so far are using numbers.
     *           protobuf and grpc-gateway have no simple way to handle this OR in a type
     *           if needed we can add another option to our jsonpb parser.
     *           We have to return even empty (id=0) id.
     *     @type \Google\Protobuf\Struct $result
     *           The result of the call. Struct is used to represent a JSON object.
     *     @type \Clarifai\Api\MCPError $error
     *           An error if returned from the MCP.
     *     @type \Clarifai\Api\Status\Status $status
     *           Have to add this for our API validation but shouldn't be returned in most cases.
     *           It may be filled in for Accepted or Allowed responses that are part of the protocol
     *           but that didn't seem to be an issue.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * This is always "2.0"
     *
     * Generated from protobuf field <code>string jsonrpc = 1;</code>
     * @return string
     */
    public function getJsonrpc()
    {
        return $this->jsonrpc;
    }

    /**
     * This is always "2.0"
     *
     * Generated from protobuf field <code>string jsonrpc = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setJsonrpc($var)
    {
        GPBUtil::checkString($var, True);
        $this->jsonrpc = $var;

        return $this;
    }

    /**
     * The id as an int. Note: the protocol says string | number. int64 becomes a string.
     * All clients tests so far are using numbers.
     * protobuf and grpc-gateway have no simple way to handle this OR in a type
     * if needed we can add another option to our jsonpb parser.
     * We have to return even empty (id=0) id.
     *
     * Generated from protobuf field <code>uint32 id = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * The id as an int. Note: the protocol says string | number. int64 becomes a string.
     * All clients tests so far are using numbers.
     * protobuf and grpc-gateway have no simple way to handle this OR in a type
     * if needed we can add another option to our jsonpb parser.
     * We have to return even empty (id=0) id.
     *
     * Generated from protobuf field <code>uint32 id = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];</code>
     * @param int $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkUint32($var);
        $this->id = $var;

        return $this;
    }

    /**
     * The result of the call. Struct is used to represent a JSON object.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct result = 3;</code>
     * @return \Google\Protobuf\Struct|null
     */
    public function getResult()
    {
        return $this->result;
    }

    public function hasResult()
    {
        return isset($this->result);
    }

    public function clearResult()
    {
        unset($this->result);
    }

    /**
     * The result of the call. Struct is used to represent a JSON object.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct result = 3;</code>
     * @param \Google\Protobuf\Struct $var
     * @return $this
     */
    public function setResult($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Struct::class);
        $this->result = $var;

        return $this;
    }

    /**
     * An error if returned from the MCP.
     *
     * Generated from protobuf field <code>.clarifai.api.MCPError error = 4;</code>
     * @return \Clarifai\Api\MCPError|null
     */
    public function getError()
    {
        return $this->error;
    }

    public function hasError()
    {
        return isset($this->error);
    }

    public function clearError()
    {
        unset($this->error);
    }

    /**
     * An error if returned from the MCP.
     *
     * Generated from protobuf field <code>.clarifai.api.MCPError error = 4;</code>
     * @param \Clarifai\Api\MCPError $var
     * @return $this
     */
    public function setError($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\MCPError::class);
        $this->error = $var;

        return $this;
    }

    /**
     * Have to add this for our API validation but shouldn't be returned in most cases.
     * It may be filled in for Accepted or Allowed responses that are part of the protocol
     * but that didn't seem to be an issue.
     *
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 5;</code>
     * @return \Clarifai\Api\Status\Status|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    public function hasStatus()
    {
        return isset($this->status);
    }

    public function clearStatus()
    {
        unset($this->status);
    }

    /**
     * Have to add this for our API validation but shouldn't be returned in most cases.
     * It may be filled in for Accepted or Allowed responses that are part of the protocol
     * but that didn't seem to be an issue.
     *
     * Generated from protobuf field <code>.clarifai.api.status.Status status = 5;</code>
     * @param \Clarifai\Api\Status\Status $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Status\Status::class);
        $this->status = $var;

        return $this;
    }

}

