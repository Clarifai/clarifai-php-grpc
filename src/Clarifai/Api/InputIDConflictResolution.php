<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use UnexpectedValueException;

/**
 * Protobuf type <code>clarifai.api.InputIDConflictResolution</code>
 */
class InputIDConflictResolution
{
    /**
     * Defaults to SKIP
     *
     * Generated from protobuf enum <code>INPUT_ID_CONFLICT_RESOLUTION_NOT_SET = 0;</code>
     */
    const INPUT_ID_CONFLICT_RESOLUTION_NOT_SET = 0;
    /**
     * Mark duplicate inputs as error and skip processing them.
     *
     * Generated from protobuf enum <code>SKIP = 1;</code>
     */
    const SKIP = 1;
    /**
     * Add a suffix to inputs with conflicting IDs. Attempts numeric suffixes "-1" to "-9" and then a randomized suffix. Identical ID's in the same request are still treated as errors.
     *
     * Generated from protobuf enum <code>SUFFIX = 2;</code>
     */
    const SUFFIX = 2;

    private static $valueToName = [
        self::INPUT_ID_CONFLICT_RESOLUTION_NOT_SET => 'INPUT_ID_CONFLICT_RESOLUTION_NOT_SET',
        self::SKIP => 'SKIP',
        self::SUFFIX => 'SUFFIX',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

