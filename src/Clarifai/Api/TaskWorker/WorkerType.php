<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api\TaskWorker;

use UnexpectedValueException;

/**
 * Protobuf type <code>clarifai.api.TaskWorker.WorkerType</code>
 */
class WorkerType
{
    /**
     * for backward compatibility when task is not setting any type and only sets workers
     *
     * Generated from protobuf enum <code>WORKER_TYPE_NOT_SET = 0;</code>
     */
    const WORKER_TYPE_NOT_SET = 0;
    /**
     * only human workers
     *
     * Generated from protobuf enum <code>WORKER_HUMAN = 1;</code>
     */
    const WORKER_HUMAN = 1;
    /**
     * auto-annotation tasks. Task must set worker as model or workflow
     *
     * Generated from protobuf enum <code>WORKER_AUTO = 2;</code>
     */
    const WORKER_AUTO = 2;

    private static $valueToName = [
        self::WORKER_TYPE_NOT_SET => 'WORKER_TYPE_NOT_SET',
        self::WORKER_HUMAN => 'WORKER_HUMAN',
        self::WORKER_AUTO => 'WORKER_AUTO',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(WorkerType::class, \Clarifai\Api\TaskWorker_WorkerType::class);

