<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * StatValueAggregateQuery
 *
 * Generated from protobuf message <code>clarifai.api.StatValueAggregateQuery</code>
 */
class StatValueAggregateQuery extends \Google\Protobuf\Internal\Message
{
    /**
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     *
     * Generated from protobuf field <code>repeated string tags = 1;</code>
     */
    private $tags;
    /**
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     *
     * Generated from protobuf field <code>repeated string tag_groups = 2;</code>
     */
    private $tag_groups;
    /**
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     *
     * Generated from protobuf field <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     */
    protected $stat_value_agg_type = 0;
    /**
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     *
     * Generated from protobuf field <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     */
    protected $stat_time_agg_type = 0;
    /**
     * If provided the time range over which values will be >= this time. If not provided then
     * all values will be used back to start of time.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    protected $start_time = null;
    /**
     * If provided the time range over which values will be <= this time. If not provided then all
     * values will be used up until now().
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    protected $end_time = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $tags
     *           These tags are used to filter down the values before they are aggregated. For example,
     *           if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $tag_groups
     *           These are tag groups to aggregate over. So for example if you added stat values with tags
     *           "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     *           aggregation would return StatValueAggregate values for each task_id. If you provide more than
     *           one tag_group the response will return all rolled up combinations of them. For example
     *           ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     *           values then you'd get StatValueAggregate values back for:
     *           task_id | something
     *           a       | 1
     *           a       | 2
     *           b       | 1
     *           b       | 1
     *     @type int $stat_value_agg_type
     *           Aggregation function to use over the values. Count(value) is also always returns.
     *           Defaults to 'sum' if not provided.
     *     @type int $stat_time_agg_type
     *           Aggregation bins for time where the values will be aggregated at this bin granualarity.
     *           And the "time" field will be returned in StatValueAggregate object.
     *           If not provided then bins are not used, and all time is aggregated over.
     *     @type \Google\Protobuf\Timestamp $start_time
     *           If provided the time range over which values will be >= this time. If not provided then
     *           all values will be used back to start of time.
     *     @type \Google\Protobuf\Timestamp $end_time
     *           If provided the time range over which values will be <= this time. If not provided then all
     *           values will be used up until now().
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     *
     * Generated from protobuf field <code>repeated string tags = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * These tags are used to filter down the values before they are aggregated. For example,
     * if you want to aggregate values for "task_id:a" you could specify that as a tag here.
     *
     * Generated from protobuf field <code>repeated string tags = 1;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTags($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->tags = $arr;

        return $this;
    }

    /**
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     *
     * Generated from protobuf field <code>repeated string tag_groups = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTagGroups()
    {
        return $this->tag_groups;
    }

    /**
     * These are tag groups to aggregate over. So for example if you added stat values with tags
     * "task_id:a" and others with "task_id:b", then added ["task_id"] to the task group, it the
     * aggregation would return StatValueAggregate values for each task_id. If you provide more than
     * one tag_group the response will return all rolled up combinations of them. For example
     * ["task_id", "something"] where "something:1" and "something:2" were used as tags for some
     * values then you'd get StatValueAggregate values back for:
     * task_id | something
     * a       | 1
     * a       | 2
     * b       | 1
     * b       | 1
     *
     * Generated from protobuf field <code>repeated string tag_groups = 2;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTagGroups($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->tag_groups = $arr;

        return $this;
    }

    /**
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     *
     * Generated from protobuf field <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     * @return int
     */
    public function getStatValueAggType()
    {
        return $this->stat_value_agg_type;
    }

    /**
     * Aggregation function to use over the values. Count(value) is also always returns.
     * Defaults to 'sum' if not provided.
     *
     * Generated from protobuf field <code>.clarifai.api.StatValueAggType stat_value_agg_type = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setStatValueAggType($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\StatValueAggType::class);
        $this->stat_value_agg_type = $var;

        return $this;
    }

    /**
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     *
     * Generated from protobuf field <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     * @return int
     */
    public function getStatTimeAggType()
    {
        return $this->stat_time_agg_type;
    }

    /**
     * Aggregation bins for time where the values will be aggregated at this bin granualarity.
     * And the "time" field will be returned in StatValueAggregate object.
     * If not provided then bins are not used, and all time is aggregated over.
     *
     * Generated from protobuf field <code>.clarifai.api.StatTimeAggType stat_time_agg_type = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setStatTimeAggType($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\StatTimeAggType::class);
        $this->stat_time_agg_type = $var;

        return $this;
    }

    /**
     * If provided the time range over which values will be >= this time. If not provided then
     * all values will be used back to start of time.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getStartTime()
    {
        return $this->start_time;
    }

    /**
     * If provided the time range over which values will be >= this time. If not provided then
     * all values will be used back to start of time.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp start_time = 5;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setStartTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->start_time = $var;

        return $this;
    }

    /**
     * If provided the time range over which values will be <= this time. If not provided then all
     * values will be used up until now().
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getEndTime()
    {
        return $this->end_time;
    }

    /**
     * If provided the time range over which values will be <= this time. If not provided then all
     * values will be used up until now().
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp end_time = 6;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setEndTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->end_time = $var;

        return $this;
    }

}

