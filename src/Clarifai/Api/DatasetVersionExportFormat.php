<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use UnexpectedValueException;

/**
 * Protobuf type <code>clarifai.api.DatasetVersionExportFormat</code>
 */
class DatasetVersionExportFormat
{
    /**
     * Generated from protobuf enum <code>DATASET_VERSION_EXPORT_FORMAT_NOT_SET = 0;</code>
     */
    const DATASET_VERSION_EXPORT_FORMAT_NOT_SET = 0;
    /**
     * CLARIFAI_DATA_PROTOBUF is the proprietary Clarifai API Data format. It
     * is a ZIP-archive containing batches of serialized InputBatch protobuf messages.
     * Note that only the "id" and "data" fields of exported inputs are set.
     *
     * Generated from protobuf enum <code>CLARIFAI_DATA_PROTOBUF = 1;</code>
     */
    const CLARIFAI_DATA_PROTOBUF = 1;
    /**
     * CLARIFAI_DATA_JSON is the proprietary Clarifai API Data format in JSON. It
     * is a ZIP-archive containing batches of serialized InputBatch JSON messages.
     * Note that only the "id" and "data" fields of exported inputs are set.
     *
     * Generated from protobuf enum <code>CLARIFAI_DATA_JSON = 3;</code>
     */
    const CLARIFAI_DATA_JSON = 3;
    /**
     * COCO is the data format used by Common Objects in Context. It is a
     * ZIP-archive containing JSON files with the dataset version annotations.
     * See https://cocodataset.org/#format-data.
     *
     * Generated from protobuf enum <code>COCO = 2;</code>
     */
    const COCO = 2;

    private static $valueToName = [
        self::DATASET_VERSION_EXPORT_FORMAT_NOT_SET => 'DATASET_VERSION_EXPORT_FORMAT_NOT_SET',
        self::CLARIFAI_DATA_PROTOBUF => 'CLARIFAI_DATA_PROTOBUF',
        self::CLARIFAI_DATA_JSON => 'CLARIFAI_DATA_JSON',
        self::COCO => 'COCO',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

