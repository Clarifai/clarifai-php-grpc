<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This is the common building block of a query which is a sequence of And messages ANDed together.
 * Note that some fields are used too RANK results (affect the scores) and some are used to FILTER
 * results (unordered subset of your app's contents). In general, FILTER operations are more
 * efficient queries at scale and when combined with RANK operations can speed up search performance
 * as you effectively operate on a smaller sub-set of your entire app.
 *
 * Generated from protobuf message <code>clarifai.api.And</code>
 */
class PBAnd extends \Google\Protobuf\Internal\Message
{
    /**
     * FILTER by input.data... information.
     * This can include human provided concepts, geo location info, metadata, etc.
     * This is effectively searching over only the trusted annotation attached to an input in your
     * app. To search by more specific annotation fields use the Annotation object here.
     * ########## Supported fields ##########
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - data.geo.geo_box[].geo_point.latitude
     *  - data.geo.geo_box[].geo_point.longitude
     *  - data.geo.geo_limit.type
     *  - data.geo.geo_limit.value
     *  - data.geo.geo_point.latitude
     *  - data.geo.geo_point.longitude
     *  - data.image.url
     *  - data.metadata - allow search with empty metadata
     *    note that searching by empty metadata will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *  - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *  - dataset_ids[] - filter by dataset IDs
     *  - id - filter by input ID
     *  - status.code - filter by input status
     *
     * Generated from protobuf field <code>.clarifai.api.Input input = 1;</code>
     */
    protected $input = null;
    /**
     * RANK based predicted outputs from models such as custom trained models, pre-trained models,
     * etc. This is also where you enter the image url for a visual search because what we're asking
     * the system to do is find output embedding most visually similar to the provided input (that
     * input being in And.output.input.data.image.url for example). This will return the Hits
     * sorted by visual similarity (1.0 being very similar or exact match and 0.0 being very
     * dissimlar). For a search by Output concept, this means we're asking the system to rank
     * the Hits by confidence of our model's predicted Outputs. So for example if the model
     * predicts an image is 0.95 likely there is a "dog" present, that should related directly
     * to the score returned if you search for Output concept "dog" in your query. This provides
     * a natural ranking to search results based on confidence of predictions from the models and
     * is used when ANDing multiple of these types of RANK by Output queries together as well.
     * ########## Supported fields ##########
     *  - data.clusters[].id
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - input.data.image - empty image is required when searching by input ID
     *  - input.data.image.base64[]
     *  - input.data.image.url
     *  - input.id
     *
     * Generated from protobuf field <code>.clarifai.api.Output output = 2;</code>
     */
    protected $output = null;
    /**
     * If True then this will flip the meaning of this part of the
     * query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
     *
     * Generated from protobuf field <code>bool negate = 3;</code>
     */
    protected $negate = false;
    /**
     * FILTER by annotation information. This is more flexible than just filtering by
     * Input information because in the general case each input can have several annotations.
     * Some example use cases for filtering by annotations:
     * 1) find all the inputs annotated "dog" by worker_id = "XYZ"
     * 2) find all the annotations associated with embed_model_version_id = "123"
     * 3) find all the annotations that are trusted, etc.
     * Since all the annotations under the hood are joined to the embedding model's annotation
     * using worker_id's of other models like cluster models or concept models should be
     * combinable with queries like visual search (a query with Output filled in).
     * ########## Supported fields ##########
     *  - annotation_info - allows searching by empty annotation info
     *    note that searching by empty annotation info will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty annotation info.
     *  - annotation_info.fields - filter by annotation info
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - data.geo.geo_box[].geo_point.latitude
     *  - data.geo.geo_box[].geo_point.longitude
     *  - data.geo.geo_limit.type
     *  - data.geo.geo_limit.value
     *  - data.geo.geo_point.latitude
     *  - data.geo.geo_point.longitude
     *  - data.image.url
     *  - data.metadata - allow search with empty metadata
     *    note that searching by empty metadata will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *  - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *  - input_id
     *  - input_level
     *  - model_version_id
     *  - status.code
     *  - task_id
     *  - trusted
     *  - user_id
     *
     * Generated from protobuf field <code>.clarifai.api.Annotation annotation = 4;</code>
     */
    protected $annotation = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Clarifai\Api\Input $input
     *           FILTER by input.data... information.
     *           This can include human provided concepts, geo location info, metadata, etc.
     *           This is effectively searching over only the trusted annotation attached to an input in your
     *           app. To search by more specific annotation fields use the Annotation object here.
     *           ########## Supported fields ##########
     *            - data.concepts[].id
     *            - data.concepts[].name
     *            - data.concepts[].value
     *            - data.geo.geo_box[].geo_point.latitude
     *            - data.geo.geo_box[].geo_point.longitude
     *            - data.geo.geo_limit.type
     *            - data.geo.geo_limit.value
     *            - data.geo.geo_point.latitude
     *            - data.geo.geo_point.longitude
     *            - data.image.url
     *            - data.metadata - allow search with empty metadata
     *              note that searching by empty metadata will actually not influence the search results.
     *              however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *            - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *            - dataset_ids[] - filter by dataset IDs
     *            - id - filter by input ID
     *            - status.code - filter by input status
     *     @type \Clarifai\Api\Output $output
     *           RANK based predicted outputs from models such as custom trained models, pre-trained models,
     *           etc. This is also where you enter the image url for a visual search because what we're asking
     *           the system to do is find output embedding most visually similar to the provided input (that
     *           input being in And.output.input.data.image.url for example). This will return the Hits
     *           sorted by visual similarity (1.0 being very similar or exact match and 0.0 being very
     *           dissimlar). For a search by Output concept, this means we're asking the system to rank
     *           the Hits by confidence of our model's predicted Outputs. So for example if the model
     *           predicts an image is 0.95 likely there is a "dog" present, that should related directly
     *           to the score returned if you search for Output concept "dog" in your query. This provides
     *           a natural ranking to search results based on confidence of predictions from the models and
     *           is used when ANDing multiple of these types of RANK by Output queries together as well.
     *           ########## Supported fields ##########
     *            - data.clusters[].id
     *            - data.concepts[].id
     *            - data.concepts[].name
     *            - data.concepts[].value
     *            - input.data.image - empty image is required when searching by input ID
     *            - input.data.image.base64[]
     *            - input.data.image.url
     *            - input.id
     *     @type bool $negate
     *           If True then this will flip the meaning of this part of the
     *           query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
     *     @type \Clarifai\Api\Annotation $annotation
     *           FILTER by annotation information. This is more flexible than just filtering by
     *           Input information because in the general case each input can have several annotations.
     *           Some example use cases for filtering by annotations:
     *           1) find all the inputs annotated "dog" by worker_id = "XYZ"
     *           2) find all the annotations associated with embed_model_version_id = "123"
     *           3) find all the annotations that are trusted, etc.
     *           Since all the annotations under the hood are joined to the embedding model's annotation
     *           using worker_id's of other models like cluster models or concept models should be
     *           combinable with queries like visual search (a query with Output filled in).
     *           ########## Supported fields ##########
     *            - annotation_info - allows searching by empty annotation info
     *              note that searching by empty annotation info will actually not influence the search results.
     *              however, in order to be user-friendly, we are still supporting searching by empty annotation info.
     *            - annotation_info.fields - filter by annotation info
     *            - data.concepts[].id
     *            - data.concepts[].name
     *            - data.concepts[].value
     *            - data.geo.geo_box[].geo_point.latitude
     *            - data.geo.geo_box[].geo_point.longitude
     *            - data.geo.geo_limit.type
     *            - data.geo.geo_limit.value
     *            - data.geo.geo_point.latitude
     *            - data.geo.geo_point.longitude
     *            - data.image.url
     *            - data.metadata - allow search with empty metadata
     *              note that searching by empty metadata will actually not influence the search results.
     *              however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *            - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *            - input_id
     *            - input_level
     *            - model_version_id
     *            - status.code
     *            - task_id
     *            - trusted
     *            - user_id
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * FILTER by input.data... information.
     * This can include human provided concepts, geo location info, metadata, etc.
     * This is effectively searching over only the trusted annotation attached to an input in your
     * app. To search by more specific annotation fields use the Annotation object here.
     * ########## Supported fields ##########
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - data.geo.geo_box[].geo_point.latitude
     *  - data.geo.geo_box[].geo_point.longitude
     *  - data.geo.geo_limit.type
     *  - data.geo.geo_limit.value
     *  - data.geo.geo_point.latitude
     *  - data.geo.geo_point.longitude
     *  - data.image.url
     *  - data.metadata - allow search with empty metadata
     *    note that searching by empty metadata will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *  - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *  - dataset_ids[] - filter by dataset IDs
     *  - id - filter by input ID
     *  - status.code - filter by input status
     *
     * Generated from protobuf field <code>.clarifai.api.Input input = 1;</code>
     * @return \Clarifai\Api\Input|null
     */
    public function getInput()
    {
        return $this->input;
    }

    public function hasInput()
    {
        return isset($this->input);
    }

    public function clearInput()
    {
        unset($this->input);
    }

    /**
     * FILTER by input.data... information.
     * This can include human provided concepts, geo location info, metadata, etc.
     * This is effectively searching over only the trusted annotation attached to an input in your
     * app. To search by more specific annotation fields use the Annotation object here.
     * ########## Supported fields ##########
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - data.geo.geo_box[].geo_point.latitude
     *  - data.geo.geo_box[].geo_point.longitude
     *  - data.geo.geo_limit.type
     *  - data.geo.geo_limit.value
     *  - data.geo.geo_point.latitude
     *  - data.geo.geo_point.longitude
     *  - data.image.url
     *  - data.metadata - allow search with empty metadata
     *    note that searching by empty metadata will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *  - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *  - dataset_ids[] - filter by dataset IDs
     *  - id - filter by input ID
     *  - status.code - filter by input status
     *
     * Generated from protobuf field <code>.clarifai.api.Input input = 1;</code>
     * @param \Clarifai\Api\Input $var
     * @return $this
     */
    public function setInput($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Input::class);
        $this->input = $var;

        return $this;
    }

    /**
     * RANK based predicted outputs from models such as custom trained models, pre-trained models,
     * etc. This is also where you enter the image url for a visual search because what we're asking
     * the system to do is find output embedding most visually similar to the provided input (that
     * input being in And.output.input.data.image.url for example). This will return the Hits
     * sorted by visual similarity (1.0 being very similar or exact match and 0.0 being very
     * dissimlar). For a search by Output concept, this means we're asking the system to rank
     * the Hits by confidence of our model's predicted Outputs. So for example if the model
     * predicts an image is 0.95 likely there is a "dog" present, that should related directly
     * to the score returned if you search for Output concept "dog" in your query. This provides
     * a natural ranking to search results based on confidence of predictions from the models and
     * is used when ANDing multiple of these types of RANK by Output queries together as well.
     * ########## Supported fields ##########
     *  - data.clusters[].id
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - input.data.image - empty image is required when searching by input ID
     *  - input.data.image.base64[]
     *  - input.data.image.url
     *  - input.id
     *
     * Generated from protobuf field <code>.clarifai.api.Output output = 2;</code>
     * @return \Clarifai\Api\Output|null
     */
    public function getOutput()
    {
        return $this->output;
    }

    public function hasOutput()
    {
        return isset($this->output);
    }

    public function clearOutput()
    {
        unset($this->output);
    }

    /**
     * RANK based predicted outputs from models such as custom trained models, pre-trained models,
     * etc. This is also where you enter the image url for a visual search because what we're asking
     * the system to do is find output embedding most visually similar to the provided input (that
     * input being in And.output.input.data.image.url for example). This will return the Hits
     * sorted by visual similarity (1.0 being very similar or exact match and 0.0 being very
     * dissimlar). For a search by Output concept, this means we're asking the system to rank
     * the Hits by confidence of our model's predicted Outputs. So for example if the model
     * predicts an image is 0.95 likely there is a "dog" present, that should related directly
     * to the score returned if you search for Output concept "dog" in your query. This provides
     * a natural ranking to search results based on confidence of predictions from the models and
     * is used when ANDing multiple of these types of RANK by Output queries together as well.
     * ########## Supported fields ##########
     *  - data.clusters[].id
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - input.data.image - empty image is required when searching by input ID
     *  - input.data.image.base64[]
     *  - input.data.image.url
     *  - input.id
     *
     * Generated from protobuf field <code>.clarifai.api.Output output = 2;</code>
     * @param \Clarifai\Api\Output $var
     * @return $this
     */
    public function setOutput($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Output::class);
        $this->output = $var;

        return $this;
    }

    /**
     * If True then this will flip the meaning of this part of the
     * query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
     *
     * Generated from protobuf field <code>bool negate = 3;</code>
     * @return bool
     */
    public function getNegate()
    {
        return $this->negate;
    }

    /**
     * If True then this will flip the meaning of this part of the
     * query. This allow for queries such as dog AND ! metadata=={"blah":"value"}
     *
     * Generated from protobuf field <code>bool negate = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setNegate($var)
    {
        GPBUtil::checkBool($var);
        $this->negate = $var;

        return $this;
    }

    /**
     * FILTER by annotation information. This is more flexible than just filtering by
     * Input information because in the general case each input can have several annotations.
     * Some example use cases for filtering by annotations:
     * 1) find all the inputs annotated "dog" by worker_id = "XYZ"
     * 2) find all the annotations associated with embed_model_version_id = "123"
     * 3) find all the annotations that are trusted, etc.
     * Since all the annotations under the hood are joined to the embedding model's annotation
     * using worker_id's of other models like cluster models or concept models should be
     * combinable with queries like visual search (a query with Output filled in).
     * ########## Supported fields ##########
     *  - annotation_info - allows searching by empty annotation info
     *    note that searching by empty annotation info will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty annotation info.
     *  - annotation_info.fields - filter by annotation info
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - data.geo.geo_box[].geo_point.latitude
     *  - data.geo.geo_box[].geo_point.longitude
     *  - data.geo.geo_limit.type
     *  - data.geo.geo_limit.value
     *  - data.geo.geo_point.latitude
     *  - data.geo.geo_point.longitude
     *  - data.image.url
     *  - data.metadata - allow search with empty metadata
     *    note that searching by empty metadata will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *  - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *  - input_id
     *  - input_level
     *  - model_version_id
     *  - status.code
     *  - task_id
     *  - trusted
     *  - user_id
     *
     * Generated from protobuf field <code>.clarifai.api.Annotation annotation = 4;</code>
     * @return \Clarifai\Api\Annotation|null
     */
    public function getAnnotation()
    {
        return $this->annotation;
    }

    public function hasAnnotation()
    {
        return isset($this->annotation);
    }

    public function clearAnnotation()
    {
        unset($this->annotation);
    }

    /**
     * FILTER by annotation information. This is more flexible than just filtering by
     * Input information because in the general case each input can have several annotations.
     * Some example use cases for filtering by annotations:
     * 1) find all the inputs annotated "dog" by worker_id = "XYZ"
     * 2) find all the annotations associated with embed_model_version_id = "123"
     * 3) find all the annotations that are trusted, etc.
     * Since all the annotations under the hood are joined to the embedding model's annotation
     * using worker_id's of other models like cluster models or concept models should be
     * combinable with queries like visual search (a query with Output filled in).
     * ########## Supported fields ##########
     *  - annotation_info - allows searching by empty annotation info
     *    note that searching by empty annotation info will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty annotation info.
     *  - annotation_info.fields - filter by annotation info
     *  - data.concepts[].id
     *  - data.concepts[].name
     *  - data.concepts[].value
     *  - data.geo.geo_box[].geo_point.latitude
     *  - data.geo.geo_box[].geo_point.longitude
     *  - data.geo.geo_limit.type
     *  - data.geo.geo_limit.value
     *  - data.geo.geo_point.latitude
     *  - data.geo.geo_point.longitude
     *  - data.image.url
     *  - data.metadata - allow search with empty metadata
     *    note that searching by empty metadata will actually not influence the search results.
     *    however, in order to be user-friendly, we are still supporting searching by empty metadata.
     *  - data.metadata.fields - filter by metadata. metadata key&value fields are OR-ed.
     *  - input_id
     *  - input_level
     *  - model_version_id
     *  - status.code
     *  - task_id
     *  - trusted
     *  - user_id
     *
     * Generated from protobuf field <code>.clarifai.api.Annotation annotation = 4;</code>
     * @param \Clarifai\Api\Annotation $var
     * @return $this
     */
    public function setAnnotation($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Annotation::class);
        $this->annotation = $var;

        return $this;
    }

}

