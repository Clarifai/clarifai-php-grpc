<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/service.proto

namespace Clarifai\Api\MultiUsersOrganizationsResponse;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>clarifai.api.MultiUsersOrganizationsResponse.UserOrganization</code>
 */
class UserOrganization extends \Google\Protobuf\Internal\Message
{
    /**
     *wrapper because might need to add role id etc in here in the future
     *
     * Generated from protobuf field <code>.clarifai.api.Organization organization = 1;</code>
     */
    protected $organization = null;
    /**
     * Generated from protobuf field <code>.clarifai.api.Role role = 2;</code>
     */
    protected $role = null;
    /**
     * Generated from protobuf field <code>string feature_flag_configs = 3;</code>
     */
    protected $feature_flag_configs = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Clarifai\Api\Organization $organization
     *          wrapper because might need to add role id etc in here in the future
     *     @type \Clarifai\Api\Role $role
     *     @type string $feature_flag_configs
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Service::initOnce();
        parent::__construct($data);
    }

    /**
     *wrapper because might need to add role id etc in here in the future
     *
     * Generated from protobuf field <code>.clarifai.api.Organization organization = 1;</code>
     * @return \Clarifai\Api\Organization|null
     */
    public function getOrganization()
    {
        return $this->organization;
    }

    public function hasOrganization()
    {
        return isset($this->organization);
    }

    public function clearOrganization()
    {
        unset($this->organization);
    }

    /**
     *wrapper because might need to add role id etc in here in the future
     *
     * Generated from protobuf field <code>.clarifai.api.Organization organization = 1;</code>
     * @param \Clarifai\Api\Organization $var
     * @return $this
     */
    public function setOrganization($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Organization::class);
        $this->organization = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Role role = 2;</code>
     * @return \Clarifai\Api\Role|null
     */
    public function getRole()
    {
        return $this->role;
    }

    public function hasRole()
    {
        return isset($this->role);
    }

    public function clearRole()
    {
        unset($this->role);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Role role = 2;</code>
     * @param \Clarifai\Api\Role $var
     * @return $this
     */
    public function setRole($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Role::class);
        $this->role = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string feature_flag_configs = 3;</code>
     * @return string
     */
    public function getFeatureFlagConfigs()
    {
        return $this->feature_flag_configs;
    }

    /**
     * Generated from protobuf field <code>string feature_flag_configs = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setFeatureFlagConfigs($var)
    {
        GPBUtil::checkString($var, True);
        $this->feature_flag_configs = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(UserOrganization::class, \Clarifai\Api\MultiUsersOrganizationsResponse_UserOrganization::class);

