<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/service.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ListModelsRequest
 *
 * Generated from protobuf message <code>clarifai.api.ListModelsRequest</code>
 */
class ListModelsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
     */
    protected $user_app_id = null;
    /**
     * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     * Defaults to 1.
     *
     * Generated from protobuf field <code>uint32 page = 2;</code>
     */
    protected $page = 0;
    /**
     * (optional URL parameter) The number of results that will be contained in each page. Defaults
     * to 128.
     *
     * Generated from protobuf field <code>uint32 per_page = 3;</code>
     */
    protected $per_page = 0;
    /**
     * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets, counts
     *
     * Generated from protobuf field <code>repeated string additional_fields = 19;</code>
     */
    private $additional_fields;
    /**
     * Sorting options:
     * Whether to sort in ascending order. If false, will order in descending order.
     *
     * Generated from protobuf field <code>bool sort_ascending = 10;</code>
     */
    protected $sort_ascending = false;
    /**
     * Filtering options:
     * Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
     * supported.
     *
     * Generated from protobuf field <code>string model_type_id = 6;</code>
     */
    protected $model_type_id = '';
    /**
     * If true, we only return models that have the status MODEL_TRAINED, which includes non-trainable model types.
     *
     * Generated from protobuf field <code>bool trained_only = 7;</code>
     */
    protected $trained_only = false;
    /**
     * The list of input fields to the model.
     * For example, you can specify 'image', which will return models that make inferences on images like visual-classifier models.
     *
     * Generated from protobuf field <code>repeated string input_fields = 8;</code>
     */
    private $input_fields;
    /**
     * The list of output fields to the model.
     * For example, you can specify 'regions[...].data.concepts', which will return visual-detector models.
     *
     * Generated from protobuf field <code>repeated string output_fields = 9;</code>
     */
    private $output_fields;
    /**
     * Filter by the license of the model version
     *
     * Generated from protobuf field <code>string license = 15;</code>
     */
    protected $license = '';
    /**
     * If true, we only return models that are handpicked by clarifai staff
     *
     * Generated from protobuf field <code>bool featured_only = 16;</code>
     */
    protected $featured_only = false;
    /**
     * If true, we only return models that are starred by the requesting user
     *
     * Generated from protobuf field <code>bool starred_only = 20;</code>
     */
    protected $starred_only = false;
    /**
     * List of toolkit tags to filter by
     *
     * Generated from protobuf field <code>repeated string toolkits = 17;</code>
     */
    private $toolkits;
    /**
     * List of use_case tags to filter by
     *
     * Generated from protobuf field <code>repeated string use_cases = 18;</code>
     */
    private $use_cases;
    /**
     * List of language tags to filter by
     *
     * Generated from protobuf field <code>repeated string languages = 21;</code>
     */
    private $languages;
    /**
     * Old API behavior resulted in returning clarifai main models when calling ListModels while scoped to an app. While we transition
     * away from that, we can use this flag to not always fetch clarifai main models, unless that is the app we are explicitly listing for.
     *
     * Generated from protobuf field <code>bool dont_fetch_from_main = 23 [deprecated = true];</code>
     * @deprecated
     */
    protected $dont_fetch_from_main = false;
    /**
     * Filter models by bookmark. If set, only return bookmarked models. Otherwise none bookmarked models only.
     * Note: you can not filter `trained_only` and bookmark at the same time.
     * When filter by bookmark, we will return trained and untrained models.
     *
     * Generated from protobuf field <code>bool bookmark = 26;</code>
     */
    protected $bookmark = false;
    /**
     * Searching options:
     * Specify a search parameter in order to perform keyword search on the
     * following fields of the model:
     *   - id
     *   - name
     *   - description
     *   - notes
     *   - user_id (unless user_app_id.user_id is already set)
     * Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
     * and used for partial prefix-matching (so searching for "clari" matches "clarifai").
     * NOTE: Both the list of fields searched and the exact keyword matching
     * rules are subject to change and not guaranteed to be backwards-compatible.
     *
     * Generated from protobuf field <code>string search = 27;</code>
     */
    protected $search = '';
    /**
     * Query name, description and id fields, that can contain the words in the query string. Does NOT support wildcards - full words only. Supports operators "OR" and "-" as NOT.
     * Deprecated: use search instead.
     *
     * Generated from protobuf field <code>string query = 14 [deprecated = true];</code>
     * @deprecated
     */
    protected $query = '';
    /**
     * Filter by the description and id of the model. This supports wildcard queries like "gen*" to match "general" as an example.
     * Deprecated: use search instead.
     *
     * Generated from protobuf field <code>string name = 5 [deprecated = true];</code>
     * @deprecated
     */
    protected $name = '';
    /**
     * Extends the name filter to include the user_id of the application owner that the model belongs to.
     * Deprecated: use search instead of name.
     *
     * Generated from protobuf field <code>bool filter_by_user_id = 22 [deprecated = true];</code>
     * @deprecated
     */
    protected $filter_by_user_id = false;
    /**
     * Filter by the model version ids. If set, only return the model of these versions.
     *
     * Generated from protobuf field <code>repeated string model_version_ids = 28;</code>
     */
    private $model_version_ids;
    /**
     * Filter by LicenseType
     *
     * Generated from protobuf field <code>.clarifai.api.LicenseType license_type = 29;</code>
     */
    protected $license_type = 0;
    /**
     * Filter by Source
     *
     * Generated from protobuf field <code>uint32 source = 30;</code>
     */
    protected $source = 0;
    /**
     * Filter by Creator
     *
     * Generated from protobuf field <code>string creator = 31;</code>
     */
    protected $creator = '';
    /**
     * Filter by model versions runners with replicas >= min_replicas.
     *
     * Generated from protobuf field <code>uint32 min_replicas = 33;</code>
     */
    protected $min_replicas = 0;
    /**
     * If true, show replica counts for models.
     *
     * Generated from protobuf field <code>bool show_replicas = 34;</code>
     */
    protected $show_replicas = false;
    /**
     * Filter by visibility of the model. If set, only return models with the specified visibility.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 35;</code>
     */
    protected $visibility = null;
    protected $sort_by;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Clarifai\Api\UserAppIDSet $user_app_id
     *     @type int $page
     *           (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     *           Defaults to 1.
     *     @type int $per_page
     *           (optional URL parameter) The number of results that will be contained in each page. Defaults
     *           to 128.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $additional_fields
     *           (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets, counts
     *     @type bool $sort_ascending
     *           Sorting options:
     *           Whether to sort in ascending order. If false, will order in descending order.
     *     @type bool $sort_by_name
     *           Whether to order by the name
     *     @type bool $sort_by_num_inputs
     *           Whether to order by the number of training inputs
     *     @type bool $sort_by_modified_at
     *           Whether to order by the modified_at time of the latest model version.
     *           If none of the sort options is set to true, will sort by modified_at.
     *     @type bool $sort_by_created_at
     *           Whether to order by the created_at
     *     @type bool $sort_by_star_count
     *           Whether to order by count of stars
     *     @type string $model_type_id
     *           Filtering options:
     *           Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
     *           supported.
     *     @type bool $trained_only
     *           If true, we only return models that have the status MODEL_TRAINED, which includes non-trainable model types.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $input_fields
     *           The list of input fields to the model.
     *           For example, you can specify 'image', which will return models that make inferences on images like visual-classifier models.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $output_fields
     *           The list of output fields to the model.
     *           For example, you can specify 'regions[...].data.concepts', which will return visual-detector models.
     *     @type string $license
     *           Filter by the license of the model version
     *     @type bool $featured_only
     *           If true, we only return models that are handpicked by clarifai staff
     *     @type bool $starred_only
     *           If true, we only return models that are starred by the requesting user
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $toolkits
     *           List of toolkit tags to filter by
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $use_cases
     *           List of use_case tags to filter by
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $languages
     *           List of language tags to filter by
     *     @type bool $dont_fetch_from_main
     *           Old API behavior resulted in returning clarifai main models when calling ListModels while scoped to an app. While we transition
     *           away from that, we can use this flag to not always fetch clarifai main models, unless that is the app we are explicitly listing for.
     *     @type bool $bookmark
     *           Filter models by bookmark. If set, only return bookmarked models. Otherwise none bookmarked models only.
     *           Note: you can not filter `trained_only` and bookmark at the same time.
     *           When filter by bookmark, we will return trained and untrained models.
     *     @type string $search
     *           Searching options:
     *           Specify a search parameter in order to perform keyword search on the
     *           following fields of the model:
     *             - id
     *             - name
     *             - description
     *             - notes
     *             - user_id (unless user_app_id.user_id is already set)
     *           Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
     *           and used for partial prefix-matching (so searching for "clari" matches "clarifai").
     *           NOTE: Both the list of fields searched and the exact keyword matching
     *           rules are subject to change and not guaranteed to be backwards-compatible.
     *     @type string $query
     *           Query name, description and id fields, that can contain the words in the query string. Does NOT support wildcards - full words only. Supports operators "OR" and "-" as NOT.
     *           Deprecated: use search instead.
     *     @type string $name
     *           Filter by the description and id of the model. This supports wildcard queries like "gen*" to match "general" as an example.
     *           Deprecated: use search instead.
     *     @type bool $filter_by_user_id
     *           Extends the name filter to include the user_id of the application owner that the model belongs to.
     *           Deprecated: use search instead of name.
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $model_version_ids
     *           Filter by the model version ids. If set, only return the model of these versions.
     *     @type int $license_type
     *           Filter by LicenseType
     *     @type int $source
     *           Filter by Source
     *     @type string $creator
     *           Filter by Creator
     *     @type int $min_replicas
     *           Filter by model versions runners with replicas >= min_replicas.
     *     @type bool $show_replicas
     *           If true, show replica counts for models.
     *     @type \Clarifai\Api\Visibility $visibility
     *           Filter by visibility of the model. If set, only return models with the specified visibility.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Service::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
     * @return \Clarifai\Api\UserAppIDSet|null
     */
    public function getUserAppId()
    {
        return $this->user_app_id;
    }

    public function hasUserAppId()
    {
        return isset($this->user_app_id);
    }

    public function clearUserAppId()
    {
        unset($this->user_app_id);
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.UserAppIDSet user_app_id = 1;</code>
     * @param \Clarifai\Api\UserAppIDSet $var
     * @return $this
     */
    public function setUserAppId($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\UserAppIDSet::class);
        $this->user_app_id = $var;

        return $this;
    }

    /**
     * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     * Defaults to 1.
     *
     * Generated from protobuf field <code>uint32 page = 2;</code>
     * @return int
     */
    public function getPage()
    {
        return $this->page;
    }

    /**
     * (optional URL parameter) The page number. Pagination is used to split the results into chunks.
     * Defaults to 1.
     *
     * Generated from protobuf field <code>uint32 page = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setPage($var)
    {
        GPBUtil::checkUint32($var);
        $this->page = $var;

        return $this;
    }

    /**
     * (optional URL parameter) The number of results that will be contained in each page. Defaults
     * to 128.
     *
     * Generated from protobuf field <code>uint32 per_page = 3;</code>
     * @return int
     */
    public function getPerPage()
    {
        return $this->per_page;
    }

    /**
     * (optional URL parameter) The number of results that will be contained in each page. Defaults
     * to 128.
     *
     * Generated from protobuf field <code>uint32 per_page = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setPerPage($var)
    {
        GPBUtil::checkUint32($var);
        $this->per_page = $var;

        return $this;
    }

    /**
     * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets, counts
     *
     * Generated from protobuf field <code>repeated string additional_fields = 19;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAdditionalFields()
    {
        return $this->additional_fields;
    }

    /**
     * (optional URL parameter) List of additional fields to be included in the response. Currently supported: all, stars, outputs, presets, counts
     *
     * Generated from protobuf field <code>repeated string additional_fields = 19;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAdditionalFields($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->additional_fields = $arr;

        return $this;
    }

    /**
     * Sorting options:
     * Whether to sort in ascending order. If false, will order in descending order.
     *
     * Generated from protobuf field <code>bool sort_ascending = 10;</code>
     * @return bool
     */
    public function getSortAscending()
    {
        return $this->sort_ascending;
    }

    /**
     * Sorting options:
     * Whether to sort in ascending order. If false, will order in descending order.
     *
     * Generated from protobuf field <code>bool sort_ascending = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setSortAscending($var)
    {
        GPBUtil::checkBool($var);
        $this->sort_ascending = $var;

        return $this;
    }

    /**
     * Whether to order by the name
     *
     * Generated from protobuf field <code>bool sort_by_name = 11;</code>
     * @return bool
     */
    public function getSortByName()
    {
        return $this->readOneof(11);
    }

    public function hasSortByName()
    {
        return $this->hasOneof(11);
    }

    /**
     * Whether to order by the name
     *
     * Generated from protobuf field <code>bool sort_by_name = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setSortByName($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * Whether to order by the number of training inputs
     *
     * Generated from protobuf field <code>bool sort_by_num_inputs = 12;</code>
     * @return bool
     */
    public function getSortByNumInputs()
    {
        return $this->readOneof(12);
    }

    public function hasSortByNumInputs()
    {
        return $this->hasOneof(12);
    }

    /**
     * Whether to order by the number of training inputs
     *
     * Generated from protobuf field <code>bool sort_by_num_inputs = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setSortByNumInputs($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * Whether to order by the modified_at time of the latest model version.
     * If none of the sort options is set to true, will sort by modified_at.
     *
     * Generated from protobuf field <code>bool sort_by_modified_at = 13;</code>
     * @return bool
     */
    public function getSortByModifiedAt()
    {
        return $this->readOneof(13);
    }

    public function hasSortByModifiedAt()
    {
        return $this->hasOneof(13);
    }

    /**
     * Whether to order by the modified_at time of the latest model version.
     * If none of the sort options is set to true, will sort by modified_at.
     *
     * Generated from protobuf field <code>bool sort_by_modified_at = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setSortByModifiedAt($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * Whether to order by the created_at
     *
     * Generated from protobuf field <code>bool sort_by_created_at = 24;</code>
     * @return bool
     */
    public function getSortByCreatedAt()
    {
        return $this->readOneof(24);
    }

    public function hasSortByCreatedAt()
    {
        return $this->hasOneof(24);
    }

    /**
     * Whether to order by the created_at
     *
     * Generated from protobuf field <code>bool sort_by_created_at = 24;</code>
     * @param bool $var
     * @return $this
     */
    public function setSortByCreatedAt($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(24, $var);

        return $this;
    }

    /**
     * Whether to order by count of stars
     *
     * Generated from protobuf field <code>bool sort_by_star_count = 25;</code>
     * @return bool
     */
    public function getSortByStarCount()
    {
        return $this->readOneof(25);
    }

    public function hasSortByStarCount()
    {
        return $this->hasOneof(25);
    }

    /**
     * Whether to order by count of stars
     *
     * Generated from protobuf field <code>bool sort_by_star_count = 25;</code>
     * @param bool $var
     * @return $this
     */
    public function setSortByStarCount($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(25, $var);

        return $this;
    }

    /**
     * Filtering options:
     * Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
     * supported.
     *
     * Generated from protobuf field <code>string model_type_id = 6;</code>
     * @return string
     */
    public function getModelTypeId()
    {
        return $this->model_type_id;
    }

    /**
     * Filtering options:
     * Filter models by the specific model_type_id. See ListModelTypes for the list of ModelType.Id's
     * supported.
     *
     * Generated from protobuf field <code>string model_type_id = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setModelTypeId($var)
    {
        GPBUtil::checkString($var, True);
        $this->model_type_id = $var;

        return $this;
    }

    /**
     * If true, we only return models that have the status MODEL_TRAINED, which includes non-trainable model types.
     *
     * Generated from protobuf field <code>bool trained_only = 7;</code>
     * @return bool
     */
    public function getTrainedOnly()
    {
        return $this->trained_only;
    }

    /**
     * If true, we only return models that have the status MODEL_TRAINED, which includes non-trainable model types.
     *
     * Generated from protobuf field <code>bool trained_only = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setTrainedOnly($var)
    {
        GPBUtil::checkBool($var);
        $this->trained_only = $var;

        return $this;
    }

    /**
     * The list of input fields to the model.
     * For example, you can specify 'image', which will return models that make inferences on images like visual-classifier models.
     *
     * Generated from protobuf field <code>repeated string input_fields = 8;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInputFields()
    {
        return $this->input_fields;
    }

    /**
     * The list of input fields to the model.
     * For example, you can specify 'image', which will return models that make inferences on images like visual-classifier models.
     *
     * Generated from protobuf field <code>repeated string input_fields = 8;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInputFields($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->input_fields = $arr;

        return $this;
    }

    /**
     * The list of output fields to the model.
     * For example, you can specify 'regions[...].data.concepts', which will return visual-detector models.
     *
     * Generated from protobuf field <code>repeated string output_fields = 9;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getOutputFields()
    {
        return $this->output_fields;
    }

    /**
     * The list of output fields to the model.
     * For example, you can specify 'regions[...].data.concepts', which will return visual-detector models.
     *
     * Generated from protobuf field <code>repeated string output_fields = 9;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setOutputFields($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->output_fields = $arr;

        return $this;
    }

    /**
     * Filter by the license of the model version
     *
     * Generated from protobuf field <code>string license = 15;</code>
     * @return string
     */
    public function getLicense()
    {
        return $this->license;
    }

    /**
     * Filter by the license of the model version
     *
     * Generated from protobuf field <code>string license = 15;</code>
     * @param string $var
     * @return $this
     */
    public function setLicense($var)
    {
        GPBUtil::checkString($var, True);
        $this->license = $var;

        return $this;
    }

    /**
     * If true, we only return models that are handpicked by clarifai staff
     *
     * Generated from protobuf field <code>bool featured_only = 16;</code>
     * @return bool
     */
    public function getFeaturedOnly()
    {
        return $this->featured_only;
    }

    /**
     * If true, we only return models that are handpicked by clarifai staff
     *
     * Generated from protobuf field <code>bool featured_only = 16;</code>
     * @param bool $var
     * @return $this
     */
    public function setFeaturedOnly($var)
    {
        GPBUtil::checkBool($var);
        $this->featured_only = $var;

        return $this;
    }

    /**
     * If true, we only return models that are starred by the requesting user
     *
     * Generated from protobuf field <code>bool starred_only = 20;</code>
     * @return bool
     */
    public function getStarredOnly()
    {
        return $this->starred_only;
    }

    /**
     * If true, we only return models that are starred by the requesting user
     *
     * Generated from protobuf field <code>bool starred_only = 20;</code>
     * @param bool $var
     * @return $this
     */
    public function setStarredOnly($var)
    {
        GPBUtil::checkBool($var);
        $this->starred_only = $var;

        return $this;
    }

    /**
     * List of toolkit tags to filter by
     *
     * Generated from protobuf field <code>repeated string toolkits = 17;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getToolkits()
    {
        return $this->toolkits;
    }

    /**
     * List of toolkit tags to filter by
     *
     * Generated from protobuf field <code>repeated string toolkits = 17;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setToolkits($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->toolkits = $arr;

        return $this;
    }

    /**
     * List of use_case tags to filter by
     *
     * Generated from protobuf field <code>repeated string use_cases = 18;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getUseCases()
    {
        return $this->use_cases;
    }

    /**
     * List of use_case tags to filter by
     *
     * Generated from protobuf field <code>repeated string use_cases = 18;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setUseCases($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->use_cases = $arr;

        return $this;
    }

    /**
     * List of language tags to filter by
     *
     * Generated from protobuf field <code>repeated string languages = 21;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLanguages()
    {
        return $this->languages;
    }

    /**
     * List of language tags to filter by
     *
     * Generated from protobuf field <code>repeated string languages = 21;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLanguages($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->languages = $arr;

        return $this;
    }

    /**
     * Old API behavior resulted in returning clarifai main models when calling ListModels while scoped to an app. While we transition
     * away from that, we can use this flag to not always fetch clarifai main models, unless that is the app we are explicitly listing for.
     *
     * Generated from protobuf field <code>bool dont_fetch_from_main = 23 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getDontFetchFromMain()
    {
        @trigger_error('dont_fetch_from_main is deprecated.', E_USER_DEPRECATED);
        return $this->dont_fetch_from_main;
    }

    /**
     * Old API behavior resulted in returning clarifai main models when calling ListModels while scoped to an app. While we transition
     * away from that, we can use this flag to not always fetch clarifai main models, unless that is the app we are explicitly listing for.
     *
     * Generated from protobuf field <code>bool dont_fetch_from_main = 23 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setDontFetchFromMain($var)
    {
        @trigger_error('dont_fetch_from_main is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->dont_fetch_from_main = $var;

        return $this;
    }

    /**
     * Filter models by bookmark. If set, only return bookmarked models. Otherwise none bookmarked models only.
     * Note: you can not filter `trained_only` and bookmark at the same time.
     * When filter by bookmark, we will return trained and untrained models.
     *
     * Generated from protobuf field <code>bool bookmark = 26;</code>
     * @return bool
     */
    public function getBookmark()
    {
        return $this->bookmark;
    }

    /**
     * Filter models by bookmark. If set, only return bookmarked models. Otherwise none bookmarked models only.
     * Note: you can not filter `trained_only` and bookmark at the same time.
     * When filter by bookmark, we will return trained and untrained models.
     *
     * Generated from protobuf field <code>bool bookmark = 26;</code>
     * @param bool $var
     * @return $this
     */
    public function setBookmark($var)
    {
        GPBUtil::checkBool($var);
        $this->bookmark = $var;

        return $this;
    }

    /**
     * Searching options:
     * Specify a search parameter in order to perform keyword search on the
     * following fields of the model:
     *   - id
     *   - name
     *   - description
     *   - notes
     *   - user_id (unless user_app_id.user_id is already set)
     * Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
     * and used for partial prefix-matching (so searching for "clari" matches "clarifai").
     * NOTE: Both the list of fields searched and the exact keyword matching
     * rules are subject to change and not guaranteed to be backwards-compatible.
     *
     * Generated from protobuf field <code>string search = 27;</code>
     * @return string
     */
    public function getSearch()
    {
        return $this->search;
    }

    /**
     * Searching options:
     * Specify a search parameter in order to perform keyword search on the
     * following fields of the model:
     *   - id
     *   - name
     *   - description
     *   - notes
     *   - user_id (unless user_app_id.user_id is already set)
     * Keywords are both normalized for search (so searching for "satisfy" matches "satisfied")
     * and used for partial prefix-matching (so searching for "clari" matches "clarifai").
     * NOTE: Both the list of fields searched and the exact keyword matching
     * rules are subject to change and not guaranteed to be backwards-compatible.
     *
     * Generated from protobuf field <code>string search = 27;</code>
     * @param string $var
     * @return $this
     */
    public function setSearch($var)
    {
        GPBUtil::checkString($var, True);
        $this->search = $var;

        return $this;
    }

    /**
     * Query name, description and id fields, that can contain the words in the query string. Does NOT support wildcards - full words only. Supports operators "OR" and "-" as NOT.
     * Deprecated: use search instead.
     *
     * Generated from protobuf field <code>string query = 14 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getQuery()
    {
        @trigger_error('query is deprecated.', E_USER_DEPRECATED);
        return $this->query;
    }

    /**
     * Query name, description and id fields, that can contain the words in the query string. Does NOT support wildcards - full words only. Supports operators "OR" and "-" as NOT.
     * Deprecated: use search instead.
     *
     * Generated from protobuf field <code>string query = 14 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setQuery($var)
    {
        @trigger_error('query is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->query = $var;

        return $this;
    }

    /**
     * Filter by the description and id of the model. This supports wildcard queries like "gen*" to match "general" as an example.
     * Deprecated: use search instead.
     *
     * Generated from protobuf field <code>string name = 5 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getName()
    {
        @trigger_error('name is deprecated.', E_USER_DEPRECATED);
        return $this->name;
    }

    /**
     * Filter by the description and id of the model. This supports wildcard queries like "gen*" to match "general" as an example.
     * Deprecated: use search instead.
     *
     * Generated from protobuf field <code>string name = 5 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setName($var)
    {
        @trigger_error('name is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Extends the name filter to include the user_id of the application owner that the model belongs to.
     * Deprecated: use search instead of name.
     *
     * Generated from protobuf field <code>bool filter_by_user_id = 22 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getFilterByUserId()
    {
        @trigger_error('filter_by_user_id is deprecated.', E_USER_DEPRECATED);
        return $this->filter_by_user_id;
    }

    /**
     * Extends the name filter to include the user_id of the application owner that the model belongs to.
     * Deprecated: use search instead of name.
     *
     * Generated from protobuf field <code>bool filter_by_user_id = 22 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setFilterByUserId($var)
    {
        @trigger_error('filter_by_user_id is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->filter_by_user_id = $var;

        return $this;
    }

    /**
     * Filter by the model version ids. If set, only return the model of these versions.
     *
     * Generated from protobuf field <code>repeated string model_version_ids = 28;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getModelVersionIds()
    {
        return $this->model_version_ids;
    }

    /**
     * Filter by the model version ids. If set, only return the model of these versions.
     *
     * Generated from protobuf field <code>repeated string model_version_ids = 28;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setModelVersionIds($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->model_version_ids = $arr;

        return $this;
    }

    /**
     * Filter by LicenseType
     *
     * Generated from protobuf field <code>.clarifai.api.LicenseType license_type = 29;</code>
     * @return int
     */
    public function getLicenseType()
    {
        return $this->license_type;
    }

    /**
     * Filter by LicenseType
     *
     * Generated from protobuf field <code>.clarifai.api.LicenseType license_type = 29;</code>
     * @param int $var
     * @return $this
     */
    public function setLicenseType($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\LicenseType::class);
        $this->license_type = $var;

        return $this;
    }

    /**
     * Filter by Source
     *
     * Generated from protobuf field <code>uint32 source = 30;</code>
     * @return int
     */
    public function getSource()
    {
        return $this->source;
    }

    /**
     * Filter by Source
     *
     * Generated from protobuf field <code>uint32 source = 30;</code>
     * @param int $var
     * @return $this
     */
    public function setSource($var)
    {
        GPBUtil::checkUint32($var);
        $this->source = $var;

        return $this;
    }

    /**
     * Filter by Creator
     *
     * Generated from protobuf field <code>string creator = 31;</code>
     * @return string
     */
    public function getCreator()
    {
        return $this->creator;
    }

    /**
     * Filter by Creator
     *
     * Generated from protobuf field <code>string creator = 31;</code>
     * @param string $var
     * @return $this
     */
    public function setCreator($var)
    {
        GPBUtil::checkString($var, True);
        $this->creator = $var;

        return $this;
    }

    /**
     * Filter by model versions runners with replicas >= min_replicas.
     *
     * Generated from protobuf field <code>uint32 min_replicas = 33;</code>
     * @return int
     */
    public function getMinReplicas()
    {
        return $this->min_replicas;
    }

    /**
     * Filter by model versions runners with replicas >= min_replicas.
     *
     * Generated from protobuf field <code>uint32 min_replicas = 33;</code>
     * @param int $var
     * @return $this
     */
    public function setMinReplicas($var)
    {
        GPBUtil::checkUint32($var);
        $this->min_replicas = $var;

        return $this;
    }

    /**
     * If true, show replica counts for models.
     *
     * Generated from protobuf field <code>bool show_replicas = 34;</code>
     * @return bool
     */
    public function getShowReplicas()
    {
        return $this->show_replicas;
    }

    /**
     * If true, show replica counts for models.
     *
     * Generated from protobuf field <code>bool show_replicas = 34;</code>
     * @param bool $var
     * @return $this
     */
    public function setShowReplicas($var)
    {
        GPBUtil::checkBool($var);
        $this->show_replicas = $var;

        return $this;
    }

    /**
     * Filter by visibility of the model. If set, only return models with the specified visibility.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 35;</code>
     * @return \Clarifai\Api\Visibility|null
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    public function hasVisibility()
    {
        return isset($this->visibility);
    }

    public function clearVisibility()
    {
        unset($this->visibility);
    }

    /**
     * Filter by visibility of the model. If set, only return models with the specified visibility.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 35;</code>
     * @param \Clarifai\Api\Visibility $var
     * @return $this
     */
    public function setVisibility($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Visibility::class);
        $this->visibility = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getSortBy()
    {
        return $this->whichOneof("sort_by");
    }

}

